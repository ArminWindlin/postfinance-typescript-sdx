"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostFinanceCheckout = void 0;
const AbstractAccountUpdate_1 = require("./src/models/AbstractAccountUpdate");
const AbstractApplicationUserUpdate_1 = require("./src/models/AbstractApplicationUserUpdate");
const AbstractCustomerActive_1 = require("./src/models/AbstractCustomerActive");
const AbstractCustomerAddressActive_1 = require("./src/models/AbstractCustomerAddressActive");
const AbstractCustomerCommentActive_1 = require("./src/models/AbstractCustomerCommentActive");
const AbstractHumanUserUpdate_1 = require("./src/models/AbstractHumanUserUpdate");
const AbstractPaymentLinkUpdate_1 = require("./src/models/AbstractPaymentLinkUpdate");
const AbstractRefundCommentActive_1 = require("./src/models/AbstractRefundCommentActive");
const AbstractShopifySubscriptionProductUpdate_1 = require("./src/models/AbstractShopifySubscriptionProductUpdate");
const AbstractSpaceUpdate_1 = require("./src/models/AbstractSpaceUpdate");
const AbstractTokenUpdate_1 = require("./src/models/AbstractTokenUpdate");
const AbstractTransactionCommentActive_1 = require("./src/models/AbstractTransactionCommentActive");
const AbstractTransactionInvoiceCommentActive_1 = require("./src/models/AbstractTransactionInvoiceCommentActive");
const AbstractTransactionPending_1 = require("./src/models/AbstractTransactionPending");
const AbstractWebhookListenerUpdate_1 = require("./src/models/AbstractWebhookListenerUpdate");
const AbstractWebhookUrlUpdate_1 = require("./src/models/AbstractWebhookUrlUpdate");
const Account_1 = require("./src/models/Account");
const AccountState_1 = require("./src/models/AccountState");
const AccountType_1 = require("./src/models/AccountType");
const Address_1 = require("./src/models/Address");
const AddressCreate_1 = require("./src/models/AddressCreate");
const AnalyticsQuery_1 = require("./src/models/AnalyticsQuery");
const AnalyticsQueryExecution_1 = require("./src/models/AnalyticsQueryExecution");
const AnalyticsQueryExecutionState_1 = require("./src/models/AnalyticsQueryExecutionState");
const AnalyticsQueryResultBatch_1 = require("./src/models/AnalyticsQueryResultBatch");
const AnalyticsSchemaColumn_1 = require("./src/models/AnalyticsSchemaColumn");
const AnalyticsSchemaTable_1 = require("./src/models/AnalyticsSchemaTable");
const BankAccount_1 = require("./src/models/BankAccount");
const BankAccountEnvironment_1 = require("./src/models/BankAccountEnvironment");
const BankAccountState_1 = require("./src/models/BankAccountState");
const BankAccountType_1 = require("./src/models/BankAccountType");
const BankTransaction_1 = require("./src/models/BankTransaction");
const BankTransactionFlowDirection_1 = require("./src/models/BankTransactionFlowDirection");
const BankTransactionSource_1 = require("./src/models/BankTransactionSource");
const BankTransactionState_1 = require("./src/models/BankTransactionState");
const BankTransactionType_1 = require("./src/models/BankTransactionType");
const ChargeAttemptEnvironment_1 = require("./src/models/ChargeAttemptEnvironment");
const ChargeAttemptState_1 = require("./src/models/ChargeAttemptState");
const ChargeFlow_1 = require("./src/models/ChargeFlow");
const ChargeFlowLevelConfiguration_1 = require("./src/models/ChargeFlowLevelConfiguration");
const ChargeFlowLevelConfigurationType_1 = require("./src/models/ChargeFlowLevelConfigurationType");
const ChargeFlowLevelState_1 = require("./src/models/ChargeFlowLevelState");
const ChargeState_1 = require("./src/models/ChargeState");
const ChargeType_1 = require("./src/models/ChargeType");
const ClientError_1 = require("./src/models/ClientError");
const ClientErrorType_1 = require("./src/models/ClientErrorType");
const CompletionLineItem_1 = require("./src/models/CompletionLineItem");
const CompletionLineItemCreate_1 = require("./src/models/CompletionLineItemCreate");
const Condition_1 = require("./src/models/Condition");
const ConditionType_1 = require("./src/models/ConditionType");
const ConnectorInvocationStage_1 = require("./src/models/ConnectorInvocationStage");
const CreationEntityState_1 = require("./src/models/CreationEntityState");
const CriteriaOperator_1 = require("./src/models/CriteriaOperator");
const CurrencyBankAccount_1 = require("./src/models/CurrencyBankAccount");
const Customer_1 = require("./src/models/Customer");
const CustomerAddress_1 = require("./src/models/CustomerAddress");
const CustomerAddressType_1 = require("./src/models/CustomerAddressType");
const CustomerComment_1 = require("./src/models/CustomerComment");
const CustomerPostalAddress_1 = require("./src/models/CustomerPostalAddress");
const CustomerPostalAddressCreate_1 = require("./src/models/CustomerPostalAddressCreate");
const CustomersPresence_1 = require("./src/models/CustomersPresence");
const DataCollectionType_1 = require("./src/models/DataCollectionType");
const DatabaseTranslatedString_1 = require("./src/models/DatabaseTranslatedString");
const DatabaseTranslatedStringItem_1 = require("./src/models/DatabaseTranslatedStringItem");
const DeliveryIndicationDecisionReason_1 = require("./src/models/DeliveryIndicationDecisionReason");
const DeliveryIndicationState_1 = require("./src/models/DeliveryIndicationState");
const DocumentTemplate_1 = require("./src/models/DocumentTemplate");
const DocumentTemplateType_1 = require("./src/models/DocumentTemplateType");
const DocumentTemplateTypeGroup_1 = require("./src/models/DocumentTemplateTypeGroup");
const EntityExportRequest_1 = require("./src/models/EntityExportRequest");
const EntityQuery_1 = require("./src/models/EntityQuery");
const EntityQueryFilter_1 = require("./src/models/EntityQueryFilter");
const EntityQueryFilterType_1 = require("./src/models/EntityQueryFilterType");
const EntityQueryOrderBy_1 = require("./src/models/EntityQueryOrderBy");
const EntityQueryOrderByType_1 = require("./src/models/EntityQueryOrderByType");
const Environment_1 = require("./src/models/Environment");
const ExternalTransferBankTransaction_1 = require("./src/models/ExternalTransferBankTransaction");
const FailureCategory_1 = require("./src/models/FailureCategory");
const FailureReason_1 = require("./src/models/FailureReason");
const Feature_1 = require("./src/models/Feature");
const FeatureCategory_1 = require("./src/models/FeatureCategory");
const Gender_1 = require("./src/models/Gender");
const HumanUser_1 = require("./src/models/HumanUser");
const InternalTransferBankTransaction_1 = require("./src/models/InternalTransferBankTransaction");
const InvoiceReconciliationRecordInvoiceLink_1 = require("./src/models/InvoiceReconciliationRecordInvoiceLink");
const InvoiceReconciliationRecordRejectionStatus_1 = require("./src/models/InvoiceReconciliationRecordRejectionStatus");
const InvoiceReconciliationRecordState_1 = require("./src/models/InvoiceReconciliationRecordState");
const InvoiceReconciliationRecordType_1 = require("./src/models/InvoiceReconciliationRecordType");
const InvoiceReimbursement_1 = require("./src/models/InvoiceReimbursement");
const InvoiceReimbursementState_1 = require("./src/models/InvoiceReimbursementState");
const Label_1 = require("./src/models/Label");
const LabelDescriptor_1 = require("./src/models/LabelDescriptor");
const LabelDescriptorCategory_1 = require("./src/models/LabelDescriptorCategory");
const LabelDescriptorGroup_1 = require("./src/models/LabelDescriptorGroup");
const LabelDescriptorType_1 = require("./src/models/LabelDescriptorType");
const LegalOrganizationForm_1 = require("./src/models/LegalOrganizationForm");
const LineItem_1 = require("./src/models/LineItem");
const LineItemAttribute_1 = require("./src/models/LineItemAttribute");
const LineItemAttributeCreate_1 = require("./src/models/LineItemAttributeCreate");
const LineItemCreate_1 = require("./src/models/LineItemCreate");
const LineItemReduction_1 = require("./src/models/LineItemReduction");
const LineItemReductionCreate_1 = require("./src/models/LineItemReductionCreate");
const LineItemType_1 = require("./src/models/LineItemType");
const LocalizedString_1 = require("./src/models/LocalizedString");
const ManualTask_1 = require("./src/models/ManualTask");
const ManualTaskAction_1 = require("./src/models/ManualTaskAction");
const ManualTaskActionStyle_1 = require("./src/models/ManualTaskActionStyle");
const ManualTaskState_1 = require("./src/models/ManualTaskState");
const ManualTaskType_1 = require("./src/models/ManualTaskType");
const OneClickPaymentMode_1 = require("./src/models/OneClickPaymentMode");
const PaymentAdjustment_1 = require("./src/models/PaymentAdjustment");
const PaymentAdjustmentType_1 = require("./src/models/PaymentAdjustmentType");
const PaymentConnector_1 = require("./src/models/PaymentConnector");
const PaymentConnectorConfiguration_1 = require("./src/models/PaymentConnectorConfiguration");
const PaymentConnectorFeature_1 = require("./src/models/PaymentConnectorFeature");
const PaymentContract_1 = require("./src/models/PaymentContract");
const PaymentContractState_1 = require("./src/models/PaymentContractState");
const PaymentContractType_1 = require("./src/models/PaymentContractType");
const PaymentInformationHash_1 = require("./src/models/PaymentInformationHash");
const PaymentInformationHashType_1 = require("./src/models/PaymentInformationHashType");
const PaymentInitiationAdviceFile_1 = require("./src/models/PaymentInitiationAdviceFile");
const PaymentInitiationAdviceFileState_1 = require("./src/models/PaymentInitiationAdviceFileState");
const PaymentLink_1 = require("./src/models/PaymentLink");
const PaymentLinkAddressHandlingMode_1 = require("./src/models/PaymentLinkAddressHandlingMode");
const PaymentLinkProtectionMode_1 = require("./src/models/PaymentLinkProtectionMode");
const PaymentLinkUpdate_1 = require("./src/models/PaymentLinkUpdate");
const PaymentMethod_1 = require("./src/models/PaymentMethod");
const PaymentMethodBrand_1 = require("./src/models/PaymentMethodBrand");
const PaymentMethodConfiguration_1 = require("./src/models/PaymentMethodConfiguration");
const PaymentPrimaryRiskTaker_1 = require("./src/models/PaymentPrimaryRiskTaker");
const PaymentProcessor_1 = require("./src/models/PaymentProcessor");
const PaymentProcessorConfiguration_1 = require("./src/models/PaymentProcessorConfiguration");
const PaymentTerminal_1 = require("./src/models/PaymentTerminal");
const PaymentTerminalAddress_1 = require("./src/models/PaymentTerminalAddress");
const PaymentTerminalConfiguration_1 = require("./src/models/PaymentTerminalConfiguration");
const PaymentTerminalConfigurationState_1 = require("./src/models/PaymentTerminalConfigurationState");
const PaymentTerminalConfigurationVersion_1 = require("./src/models/PaymentTerminalConfigurationVersion");
const PaymentTerminalConfigurationVersionState_1 = require("./src/models/PaymentTerminalConfigurationVersionState");
const PaymentTerminalDccTransactionSum_1 = require("./src/models/PaymentTerminalDccTransactionSum");
const PaymentTerminalLocation_1 = require("./src/models/PaymentTerminalLocation");
const PaymentTerminalLocationState_1 = require("./src/models/PaymentTerminalLocationState");
const PaymentTerminalLocationVersion_1 = require("./src/models/PaymentTerminalLocationVersion");
const PaymentTerminalLocationVersionState_1 = require("./src/models/PaymentTerminalLocationVersionState");
const PaymentTerminalReceiptType_1 = require("./src/models/PaymentTerminalReceiptType");
const PaymentTerminalState_1 = require("./src/models/PaymentTerminalState");
const PaymentTerminalTransactionSum_1 = require("./src/models/PaymentTerminalTransactionSum");
const PaymentTerminalTransactionSummary_1 = require("./src/models/PaymentTerminalTransactionSummary");
const PaymentTerminalTransactionSummaryFetchRequest_1 = require("./src/models/PaymentTerminalTransactionSummaryFetchRequest");
const PaymentTerminalType_1 = require("./src/models/PaymentTerminalType");
const Permission_1 = require("./src/models/Permission");
const Refund_1 = require("./src/models/Refund");
const RefundComment_1 = require("./src/models/RefundComment");
const RefundCreate_1 = require("./src/models/RefundCreate");
const RefundState_1 = require("./src/models/RefundState");
const RefundType_1 = require("./src/models/RefundType");
const RenderedDocument_1 = require("./src/models/RenderedDocument");
const RenderedTerminalReceipt_1 = require("./src/models/RenderedTerminalReceipt");
const RenderedTerminalTransactionSummary_1 = require("./src/models/RenderedTerminalTransactionSummary");
const ResourcePath_1 = require("./src/models/ResourcePath");
const ResourceState_1 = require("./src/models/ResourceState");
const RestAddressFormat_1 = require("./src/models/RestAddressFormat");
const RestAddressFormatField_1 = require("./src/models/RestAddressFormatField");
const RestCountry_1 = require("./src/models/RestCountry");
const RestCountryState_1 = require("./src/models/RestCountryState");
const RestCurrency_1 = require("./src/models/RestCurrency");
const RestLanguage_1 = require("./src/models/RestLanguage");
const Role_1 = require("./src/models/Role");
const RoleState_1 = require("./src/models/RoleState");
const SalesChannel_1 = require("./src/models/SalesChannel");
const Scope_1 = require("./src/models/Scope");
const ServerError_1 = require("./src/models/ServerError");
const ShopifyAdditionalLineItemData_1 = require("./src/models/ShopifyAdditionalLineItemData");
const ShopifyIntegration_1 = require("./src/models/ShopifyIntegration");
const ShopifyIntegrationPaymentAppVersion_1 = require("./src/models/ShopifyIntegrationPaymentAppVersion");
const ShopifyIntegrationSubscriptionAppVersion_1 = require("./src/models/ShopifyIntegrationSubscriptionAppVersion");
const ShopifyRecurringOrderState_1 = require("./src/models/ShopifyRecurringOrderState");
const ShopifyRecurringOrderUpdateRequest_1 = require("./src/models/ShopifyRecurringOrderUpdateRequest");
const ShopifySubscriber_1 = require("./src/models/ShopifySubscriber");
const ShopifySubscriberActive_1 = require("./src/models/ShopifySubscriberActive");
const ShopifySubscriberCreation_1 = require("./src/models/ShopifySubscriberCreation");
const ShopifySubscriberState_1 = require("./src/models/ShopifySubscriberState");
const ShopifySubscription_1 = require("./src/models/ShopifySubscription");
const ShopifySubscriptionAddressCreate_1 = require("./src/models/ShopifySubscriptionAddressCreate");
const ShopifySubscriptionBillingIntervalUnit_1 = require("./src/models/ShopifySubscriptionBillingIntervalUnit");
const ShopifySubscriptionCreationRequest_1 = require("./src/models/ShopifySubscriptionCreationRequest");
const ShopifySubscriptionModelBillingConfiguration_1 = require("./src/models/ShopifySubscriptionModelBillingConfiguration");
const ShopifySubscriptionModelItem_1 = require("./src/models/ShopifySubscriptionModelItem");
const ShopifySubscriptionModelTaxLine_1 = require("./src/models/ShopifySubscriptionModelTaxLine");
const ShopifySubscriptionProduct_1 = require("./src/models/ShopifySubscriptionProduct");
const ShopifySubscriptionProductPricingOption_1 = require("./src/models/ShopifySubscriptionProductPricingOption");
const ShopifySubscriptionProductState_1 = require("./src/models/ShopifySubscriptionProductState");
const ShopifySubscriptionState_1 = require("./src/models/ShopifySubscriptionState");
const ShopifySubscriptionSuspension_1 = require("./src/models/ShopifySubscriptionSuspension");
const ShopifySubscriptionSuspensionCreate_1 = require("./src/models/ShopifySubscriptionSuspensionCreate");
const ShopifySubscriptionSuspensionInitiator_1 = require("./src/models/ShopifySubscriptionSuspensionInitiator");
const ShopifySubscriptionSuspensionState_1 = require("./src/models/ShopifySubscriptionSuspensionState");
const ShopifySubscriptionSuspensionType_1 = require("./src/models/ShopifySubscriptionSuspensionType");
const ShopifySubscriptionUpdateAddressesRequest_1 = require("./src/models/ShopifySubscriptionUpdateAddressesRequest");
const ShopifySubscriptionUpdateRequest_1 = require("./src/models/ShopifySubscriptionUpdateRequest");
const ShopifySubscriptionVersion_1 = require("./src/models/ShopifySubscriptionVersion");
const ShopifySubscriptionVersionItem_1 = require("./src/models/ShopifySubscriptionVersionItem");
const ShopifySubscriptionVersionItemPriceStrategy_1 = require("./src/models/ShopifySubscriptionVersionItemPriceStrategy");
const ShopifySubscriptionVersionState_1 = require("./src/models/ShopifySubscriptionVersionState");
const ShopifySubscriptionWeekday_1 = require("./src/models/ShopifySubscriptionWeekday");
const ShopifyTaxLine_1 = require("./src/models/ShopifyTaxLine");
const ShopifyTransactionState_1 = require("./src/models/ShopifyTransactionState");
const Space_1 = require("./src/models/Space");
const SpaceAddress_1 = require("./src/models/SpaceAddress");
const SpaceAddressCreate_1 = require("./src/models/SpaceAddressCreate");
const SpaceView_1 = require("./src/models/SpaceView");
const StaticValue_1 = require("./src/models/StaticValue");
const Tax_1 = require("./src/models/Tax");
const TaxCreate_1 = require("./src/models/TaxCreate");
const TenantDatabase_1 = require("./src/models/TenantDatabase");
const TerminalReceiptFetchRequest_1 = require("./src/models/TerminalReceiptFetchRequest");
const TerminalReceiptFormat_1 = require("./src/models/TerminalReceiptFormat");
const Token_1 = require("./src/models/Token");
const TokenVersion_1 = require("./src/models/TokenVersion");
const TokenVersionState_1 = require("./src/models/TokenVersionState");
const TokenVersionType_1 = require("./src/models/TokenVersionType");
const TokenizationMode_1 = require("./src/models/TokenizationMode");
const Transaction_1 = require("./src/models/Transaction");
const TransactionAwareEntity_1 = require("./src/models/TransactionAwareEntity");
const TransactionComment_1 = require("./src/models/TransactionComment");
const TransactionCompletionBehavior_1 = require("./src/models/TransactionCompletionBehavior");
const TransactionCompletionMode_1 = require("./src/models/TransactionCompletionMode");
const TransactionCompletionRequest_1 = require("./src/models/TransactionCompletionRequest");
const TransactionCompletionState_1 = require("./src/models/TransactionCompletionState");
const TransactionEnvironmentSelectionStrategy_1 = require("./src/models/TransactionEnvironmentSelectionStrategy");
const TransactionGroup_1 = require("./src/models/TransactionGroup");
const TransactionGroupState_1 = require("./src/models/TransactionGroupState");
const TransactionInvoiceComment_1 = require("./src/models/TransactionInvoiceComment");
const TransactionInvoiceReplacement_1 = require("./src/models/TransactionInvoiceReplacement");
const TransactionInvoiceState_1 = require("./src/models/TransactionInvoiceState");
const TransactionLineItemVersionCreate_1 = require("./src/models/TransactionLineItemVersionCreate");
const TransactionLineItemVersionState_1 = require("./src/models/TransactionLineItemVersionState");
const TransactionState_1 = require("./src/models/TransactionState");
const TransactionUserInterfaceType_1 = require("./src/models/TransactionUserInterfaceType");
const TransactionVoidMode_1 = require("./src/models/TransactionVoidMode");
const TransactionVoidState_1 = require("./src/models/TransactionVoidState");
const TwoFactorAuthenticationType_1 = require("./src/models/TwoFactorAuthenticationType");
const User_1 = require("./src/models/User");
const UserAccountRole_1 = require("./src/models/UserAccountRole");
const UserSpaceRole_1 = require("./src/models/UserSpaceRole");
const UserType_1 = require("./src/models/UserType");
const WalletType_1 = require("./src/models/WalletType");
const WebhookIdentity_1 = require("./src/models/WebhookIdentity");
const WebhookListener_1 = require("./src/models/WebhookListener");
const WebhookListenerEntity_1 = require("./src/models/WebhookListenerEntity");
const WebhookUrl_1 = require("./src/models/WebhookUrl");
const AccountCreate_1 = require("./src/models/AccountCreate");
const AccountUpdate_1 = require("./src/models/AccountUpdate");
const ApplicationUser_1 = require("./src/models/ApplicationUser");
const ApplicationUserCreate_1 = require("./src/models/ApplicationUserCreate");
const ApplicationUserUpdate_1 = require("./src/models/ApplicationUserUpdate");
const Charge_1 = require("./src/models/Charge");
const ChargeAttempt_1 = require("./src/models/ChargeAttempt");
const ChargeBankTransaction_1 = require("./src/models/ChargeBankTransaction");
const ChargeFlowLevel_1 = require("./src/models/ChargeFlowLevel");
const ChargeFlowLevelPaymentLink_1 = require("./src/models/ChargeFlowLevelPaymentLink");
const ConnectorInvocation_1 = require("./src/models/ConnectorInvocation");
const CustomerActive_1 = require("./src/models/CustomerActive");
const CustomerAddressActive_1 = require("./src/models/CustomerAddressActive");
const CustomerAddressCreate_1 = require("./src/models/CustomerAddressCreate");
const CustomerCommentActive_1 = require("./src/models/CustomerCommentActive");
const CustomerCommentCreate_1 = require("./src/models/CustomerCommentCreate");
const CustomerCreate_1 = require("./src/models/CustomerCreate");
const DeliveryIndication_1 = require("./src/models/DeliveryIndication");
const HumanUserCreate_1 = require("./src/models/HumanUserCreate");
const HumanUserUpdate_1 = require("./src/models/HumanUserUpdate");
const InvoiceReconciliationRecord_1 = require("./src/models/InvoiceReconciliationRecord");
const InvoiceReimbursementWithRefundReference_1 = require("./src/models/InvoiceReimbursementWithRefundReference");
const PaymentLinkActive_1 = require("./src/models/PaymentLinkActive");
const PaymentLinkCreate_1 = require("./src/models/PaymentLinkCreate");
const RefundBankTransaction_1 = require("./src/models/RefundBankTransaction");
const RefundCommentActive_1 = require("./src/models/RefundCommentActive");
const RefundCommentCreate_1 = require("./src/models/RefundCommentCreate");
const RefundRecoveryBankTransaction_1 = require("./src/models/RefundRecoveryBankTransaction");
const ShopifyRecurringOrder_1 = require("./src/models/ShopifyRecurringOrder");
const ShopifySubscriptionAddress_1 = require("./src/models/ShopifySubscriptionAddress");
const ShopifySubscriptionProductCreate_1 = require("./src/models/ShopifySubscriptionProductCreate");
const ShopifySubscriptionProductUpdate_1 = require("./src/models/ShopifySubscriptionProductUpdate");
const ShopifyTransaction_1 = require("./src/models/ShopifyTransaction");
const SpaceCreate_1 = require("./src/models/SpaceCreate");
const SpaceUpdate_1 = require("./src/models/SpaceUpdate");
const TokenCreate_1 = require("./src/models/TokenCreate");
const TokenUpdate_1 = require("./src/models/TokenUpdate");
const TransactionCommentActive_1 = require("./src/models/TransactionCommentActive");
const TransactionCommentCreate_1 = require("./src/models/TransactionCommentCreate");
const TransactionCompletion_1 = require("./src/models/TransactionCompletion");
const TransactionCreate_1 = require("./src/models/TransactionCreate");
const TransactionInvoice_1 = require("./src/models/TransactionInvoice");
const TransactionInvoiceCommentActive_1 = require("./src/models/TransactionInvoiceCommentActive");
const TransactionInvoiceCommentCreate_1 = require("./src/models/TransactionInvoiceCommentCreate");
const TransactionLineItemVersion_1 = require("./src/models/TransactionLineItemVersion");
const TransactionPending_1 = require("./src/models/TransactionPending");
const TransactionVoid_1 = require("./src/models/TransactionVoid");
const WebhookListenerCreate_1 = require("./src/models/WebhookListenerCreate");
const WebhookListenerUpdate_1 = require("./src/models/WebhookListenerUpdate");
const WebhookUrlCreate_1 = require("./src/models/WebhookUrlCreate");
const WebhookUrlUpdate_1 = require("./src/models/WebhookUrlUpdate");
const ApplicationUserCreateWithMacKey_1 = require("./src/models/ApplicationUserCreateWithMacKey");
const AccountService_1 = require("./src/api/AccountService");
const AnalyticsQueryService_1 = require("./src/api/AnalyticsQueryService");
const ApplicationUserService_1 = require("./src/api/ApplicationUserService");
const BankAccountService_1 = require("./src/api/BankAccountService");
const BankTransactionService_1 = require("./src/api/BankTransactionService");
const ChargeAttemptService_1 = require("./src/api/ChargeAttemptService");
const ChargeBankTransactionService_1 = require("./src/api/ChargeBankTransactionService");
const ChargeFlowLevelPaymentLinkService_1 = require("./src/api/ChargeFlowLevelPaymentLinkService");
const ChargeFlowLevelService_1 = require("./src/api/ChargeFlowLevelService");
const ChargeFlowService_1 = require("./src/api/ChargeFlowService");
const ConditionTypeService_1 = require("./src/api/ConditionTypeService");
const CountryService_1 = require("./src/api/CountryService");
const CountryStateService_1 = require("./src/api/CountryStateService");
const CurrencyBankAccountService_1 = require("./src/api/CurrencyBankAccountService");
const CurrencyService_1 = require("./src/api/CurrencyService");
const CustomerAddressService_1 = require("./src/api/CustomerAddressService");
const CustomerCommentService_1 = require("./src/api/CustomerCommentService");
const CustomerService_1 = require("./src/api/CustomerService");
const DeliveryIndicationService_1 = require("./src/api/DeliveryIndicationService");
const DocumentTemplateService_1 = require("./src/api/DocumentTemplateService");
const DocumentTemplateTypeService_1 = require("./src/api/DocumentTemplateTypeService");
const ExternalTransferBankTransactionService_1 = require("./src/api/ExternalTransferBankTransactionService");
const HumanUserService_1 = require("./src/api/HumanUserService");
const InternalTransferBankTransactionService_1 = require("./src/api/InternalTransferBankTransactionService");
const InvoiceReconciliationRecordInvoiceLinkService_1 = require("./src/api/InvoiceReconciliationRecordInvoiceLinkService");
const InvoiceReconciliationRecordService_1 = require("./src/api/InvoiceReconciliationRecordService");
const InvoiceReimbursementService_1 = require("./src/api/InvoiceReimbursementService");
const LabelDescriptionGroupService_1 = require("./src/api/LabelDescriptionGroupService");
const LabelDescriptionService_1 = require("./src/api/LabelDescriptionService");
const LanguageService_1 = require("./src/api/LanguageService");
const LegalOrganizationFormService_1 = require("./src/api/LegalOrganizationFormService");
const ManualTaskService_1 = require("./src/api/ManualTaskService");
const PaymentConnectorConfigurationService_1 = require("./src/api/PaymentConnectorConfigurationService");
const PaymentConnectorService_1 = require("./src/api/PaymentConnectorService");
const PaymentLinkService_1 = require("./src/api/PaymentLinkService");
const PaymentMethodBrandService_1 = require("./src/api/PaymentMethodBrandService");
const PaymentMethodConfigurationService_1 = require("./src/api/PaymentMethodConfigurationService");
const PaymentMethodService_1 = require("./src/api/PaymentMethodService");
const PaymentProcessorConfigurationService_1 = require("./src/api/PaymentProcessorConfigurationService");
const PaymentProcessorService_1 = require("./src/api/PaymentProcessorService");
const PaymentTerminalService_1 = require("./src/api/PaymentTerminalService");
const PaymentTerminalTillService_1 = require("./src/api/PaymentTerminalTillService");
const PaymentTerminalTransactionSummaryService_1 = require("./src/api/PaymentTerminalTransactionSummaryService");
const PermissionService_1 = require("./src/api/PermissionService");
const RefundBankTransactionService_1 = require("./src/api/RefundBankTransactionService");
const RefundCommentService_1 = require("./src/api/RefundCommentService");
const RefundRecoveryBankTransactionService_1 = require("./src/api/RefundRecoveryBankTransactionService");
const RefundService_1 = require("./src/api/RefundService");
const ShopifyRecurringOrderService_1 = require("./src/api/ShopifyRecurringOrderService");
const ShopifySubscriberService_1 = require("./src/api/ShopifySubscriberService");
const ShopifySubscriptionProductService_1 = require("./src/api/ShopifySubscriptionProductService");
const ShopifySubscriptionService_1 = require("./src/api/ShopifySubscriptionService");
const ShopifySubscriptionSuspensionService_1 = require("./src/api/ShopifySubscriptionSuspensionService");
const ShopifySubscriptionVersionService_1 = require("./src/api/ShopifySubscriptionVersionService");
const ShopifyTransactionService_1 = require("./src/api/ShopifyTransactionService");
const SpaceService_1 = require("./src/api/SpaceService");
const StaticValueService_1 = require("./src/api/StaticValueService");
const TokenService_1 = require("./src/api/TokenService");
const TokenVersionService_1 = require("./src/api/TokenVersionService");
const TransactionCommentService_1 = require("./src/api/TransactionCommentService");
const TransactionCompletionService_1 = require("./src/api/TransactionCompletionService");
const TransactionIframeService_1 = require("./src/api/TransactionIframeService");
const TransactionInvoiceCommentService_1 = require("./src/api/TransactionInvoiceCommentService");
const TransactionInvoiceService_1 = require("./src/api/TransactionInvoiceService");
const TransactionLightboxService_1 = require("./src/api/TransactionLightboxService");
const TransactionLineItemVersionService_1 = require("./src/api/TransactionLineItemVersionService");
const TransactionMobileSdkService_1 = require("./src/api/TransactionMobileSdkService");
const TransactionPaymentPageService_1 = require("./src/api/TransactionPaymentPageService");
const TransactionService_1 = require("./src/api/TransactionService");
const TransactionTerminalService_1 = require("./src/api/TransactionTerminalService");
const TransactionVoidService_1 = require("./src/api/TransactionVoidService");
const UserAccountRoleService_1 = require("./src/api/UserAccountRoleService");
const UserSpaceRoleService_1 = require("./src/api/UserSpaceRoleService");
const WebhookListenerService_1 = require("./src/api/WebhookListenerService");
const WebhookUrlService_1 = require("./src/api/WebhookUrlService");
var PostFinanceCheckout;
(function (PostFinanceCheckout) {
    let model;
    (function (model) {
        model.AbstractAccountUpdate = AbstractAccountUpdate_1.AbstractAccountUpdate;
        model.AbstractApplicationUserUpdate = AbstractApplicationUserUpdate_1.AbstractApplicationUserUpdate;
        model.AbstractCustomerActive = AbstractCustomerActive_1.AbstractCustomerActive;
        model.AbstractCustomerAddressActive = AbstractCustomerAddressActive_1.AbstractCustomerAddressActive;
        model.AbstractCustomerCommentActive = AbstractCustomerCommentActive_1.AbstractCustomerCommentActive;
        model.AbstractHumanUserUpdate = AbstractHumanUserUpdate_1.AbstractHumanUserUpdate;
        model.AbstractPaymentLinkUpdate = AbstractPaymentLinkUpdate_1.AbstractPaymentLinkUpdate;
        model.AbstractRefundCommentActive = AbstractRefundCommentActive_1.AbstractRefundCommentActive;
        model.AbstractShopifySubscriptionProductUpdate = AbstractShopifySubscriptionProductUpdate_1.AbstractShopifySubscriptionProductUpdate;
        model.AbstractSpaceUpdate = AbstractSpaceUpdate_1.AbstractSpaceUpdate;
        model.AbstractTokenUpdate = AbstractTokenUpdate_1.AbstractTokenUpdate;
        model.AbstractTransactionCommentActive = AbstractTransactionCommentActive_1.AbstractTransactionCommentActive;
        model.AbstractTransactionInvoiceCommentActive = AbstractTransactionInvoiceCommentActive_1.AbstractTransactionInvoiceCommentActive;
        model.AbstractTransactionPending = AbstractTransactionPending_1.AbstractTransactionPending;
        model.AbstractWebhookListenerUpdate = AbstractWebhookListenerUpdate_1.AbstractWebhookListenerUpdate;
        model.AbstractWebhookUrlUpdate = AbstractWebhookUrlUpdate_1.AbstractWebhookUrlUpdate;
        model.Account = Account_1.Account;
        model.AccountState = AccountState_1.AccountState;
        model.AccountType = AccountType_1.AccountType;
        model.Address = Address_1.Address;
        model.AddressCreate = AddressCreate_1.AddressCreate;
        model.AnalyticsQuery = AnalyticsQuery_1.AnalyticsQuery;
        model.AnalyticsQueryExecution = AnalyticsQueryExecution_1.AnalyticsQueryExecution;
        model.AnalyticsQueryExecutionState = AnalyticsQueryExecutionState_1.AnalyticsQueryExecutionState;
        model.AnalyticsQueryResultBatch = AnalyticsQueryResultBatch_1.AnalyticsQueryResultBatch;
        model.AnalyticsSchemaColumn = AnalyticsSchemaColumn_1.AnalyticsSchemaColumn;
        model.AnalyticsSchemaTable = AnalyticsSchemaTable_1.AnalyticsSchemaTable;
        model.BankAccount = BankAccount_1.BankAccount;
        model.BankAccountEnvironment = BankAccountEnvironment_1.BankAccountEnvironment;
        model.BankAccountState = BankAccountState_1.BankAccountState;
        model.BankAccountType = BankAccountType_1.BankAccountType;
        model.BankTransaction = BankTransaction_1.BankTransaction;
        model.BankTransactionFlowDirection = BankTransactionFlowDirection_1.BankTransactionFlowDirection;
        model.BankTransactionSource = BankTransactionSource_1.BankTransactionSource;
        model.BankTransactionState = BankTransactionState_1.BankTransactionState;
        model.BankTransactionType = BankTransactionType_1.BankTransactionType;
        model.ChargeAttemptEnvironment = ChargeAttemptEnvironment_1.ChargeAttemptEnvironment;
        model.ChargeAttemptState = ChargeAttemptState_1.ChargeAttemptState;
        model.ChargeFlow = ChargeFlow_1.ChargeFlow;
        model.ChargeFlowLevelConfiguration = ChargeFlowLevelConfiguration_1.ChargeFlowLevelConfiguration;
        model.ChargeFlowLevelConfigurationType = ChargeFlowLevelConfigurationType_1.ChargeFlowLevelConfigurationType;
        model.ChargeFlowLevelState = ChargeFlowLevelState_1.ChargeFlowLevelState;
        model.ChargeState = ChargeState_1.ChargeState;
        model.ChargeType = ChargeType_1.ChargeType;
        model.ClientError = ClientError_1.ClientError;
        model.ClientErrorType = ClientErrorType_1.ClientErrorType;
        model.CompletionLineItem = CompletionLineItem_1.CompletionLineItem;
        model.CompletionLineItemCreate = CompletionLineItemCreate_1.CompletionLineItemCreate;
        model.Condition = Condition_1.Condition;
        model.ConditionType = ConditionType_1.ConditionType;
        model.ConnectorInvocationStage = ConnectorInvocationStage_1.ConnectorInvocationStage;
        model.CreationEntityState = CreationEntityState_1.CreationEntityState;
        model.CriteriaOperator = CriteriaOperator_1.CriteriaOperator;
        model.CurrencyBankAccount = CurrencyBankAccount_1.CurrencyBankAccount;
        model.Customer = Customer_1.Customer;
        model.CustomerAddress = CustomerAddress_1.CustomerAddress;
        model.CustomerAddressType = CustomerAddressType_1.CustomerAddressType;
        model.CustomerComment = CustomerComment_1.CustomerComment;
        model.CustomerPostalAddress = CustomerPostalAddress_1.CustomerPostalAddress;
        model.CustomerPostalAddressCreate = CustomerPostalAddressCreate_1.CustomerPostalAddressCreate;
        model.CustomersPresence = CustomersPresence_1.CustomersPresence;
        model.DataCollectionType = DataCollectionType_1.DataCollectionType;
        model.DatabaseTranslatedString = DatabaseTranslatedString_1.DatabaseTranslatedString;
        model.DatabaseTranslatedStringItem = DatabaseTranslatedStringItem_1.DatabaseTranslatedStringItem;
        model.DeliveryIndicationDecisionReason = DeliveryIndicationDecisionReason_1.DeliveryIndicationDecisionReason;
        model.DeliveryIndicationState = DeliveryIndicationState_1.DeliveryIndicationState;
        model.DocumentTemplate = DocumentTemplate_1.DocumentTemplate;
        model.DocumentTemplateType = DocumentTemplateType_1.DocumentTemplateType;
        model.DocumentTemplateTypeGroup = DocumentTemplateTypeGroup_1.DocumentTemplateTypeGroup;
        model.EntityExportRequest = EntityExportRequest_1.EntityExportRequest;
        model.EntityQuery = EntityQuery_1.EntityQuery;
        model.EntityQueryFilter = EntityQueryFilter_1.EntityQueryFilter;
        model.EntityQueryFilterType = EntityQueryFilterType_1.EntityQueryFilterType;
        model.EntityQueryOrderBy = EntityQueryOrderBy_1.EntityQueryOrderBy;
        model.EntityQueryOrderByType = EntityQueryOrderByType_1.EntityQueryOrderByType;
        model.Environment = Environment_1.Environment;
        model.ExternalTransferBankTransaction = ExternalTransferBankTransaction_1.ExternalTransferBankTransaction;
        model.FailureCategory = FailureCategory_1.FailureCategory;
        model.FailureReason = FailureReason_1.FailureReason;
        model.Feature = Feature_1.Feature;
        model.FeatureCategory = FeatureCategory_1.FeatureCategory;
        model.Gender = Gender_1.Gender;
        model.HumanUser = HumanUser_1.HumanUser;
        model.InternalTransferBankTransaction = InternalTransferBankTransaction_1.InternalTransferBankTransaction;
        model.InvoiceReconciliationRecordInvoiceLink = InvoiceReconciliationRecordInvoiceLink_1.InvoiceReconciliationRecordInvoiceLink;
        model.InvoiceReconciliationRecordRejectionStatus = InvoiceReconciliationRecordRejectionStatus_1.InvoiceReconciliationRecordRejectionStatus;
        model.InvoiceReconciliationRecordState = InvoiceReconciliationRecordState_1.InvoiceReconciliationRecordState;
        model.InvoiceReconciliationRecordType = InvoiceReconciliationRecordType_1.InvoiceReconciliationRecordType;
        model.InvoiceReimbursement = InvoiceReimbursement_1.InvoiceReimbursement;
        model.InvoiceReimbursementState = InvoiceReimbursementState_1.InvoiceReimbursementState;
        model.Label = Label_1.Label;
        model.LabelDescriptor = LabelDescriptor_1.LabelDescriptor;
        model.LabelDescriptorCategory = LabelDescriptorCategory_1.LabelDescriptorCategory;
        model.LabelDescriptorGroup = LabelDescriptorGroup_1.LabelDescriptorGroup;
        model.LabelDescriptorType = LabelDescriptorType_1.LabelDescriptorType;
        model.LegalOrganizationForm = LegalOrganizationForm_1.LegalOrganizationForm;
        model.LineItem = LineItem_1.LineItem;
        model.LineItemAttribute = LineItemAttribute_1.LineItemAttribute;
        model.LineItemAttributeCreate = LineItemAttributeCreate_1.LineItemAttributeCreate;
        model.LineItemCreate = LineItemCreate_1.LineItemCreate;
        model.LineItemReduction = LineItemReduction_1.LineItemReduction;
        model.LineItemReductionCreate = LineItemReductionCreate_1.LineItemReductionCreate;
        model.LineItemType = LineItemType_1.LineItemType;
        model.LocalizedString = LocalizedString_1.LocalizedString;
        model.ManualTask = ManualTask_1.ManualTask;
        model.ManualTaskAction = ManualTaskAction_1.ManualTaskAction;
        model.ManualTaskActionStyle = ManualTaskActionStyle_1.ManualTaskActionStyle;
        model.ManualTaskState = ManualTaskState_1.ManualTaskState;
        model.ManualTaskType = ManualTaskType_1.ManualTaskType;
        model.OneClickPaymentMode = OneClickPaymentMode_1.OneClickPaymentMode;
        model.PaymentAdjustment = PaymentAdjustment_1.PaymentAdjustment;
        model.PaymentAdjustmentType = PaymentAdjustmentType_1.PaymentAdjustmentType;
        model.PaymentConnector = PaymentConnector_1.PaymentConnector;
        model.PaymentConnectorConfiguration = PaymentConnectorConfiguration_1.PaymentConnectorConfiguration;
        model.PaymentConnectorFeature = PaymentConnectorFeature_1.PaymentConnectorFeature;
        model.PaymentContract = PaymentContract_1.PaymentContract;
        model.PaymentContractState = PaymentContractState_1.PaymentContractState;
        model.PaymentContractType = PaymentContractType_1.PaymentContractType;
        model.PaymentInformationHash = PaymentInformationHash_1.PaymentInformationHash;
        model.PaymentInformationHashType = PaymentInformationHashType_1.PaymentInformationHashType;
        model.PaymentInitiationAdviceFile = PaymentInitiationAdviceFile_1.PaymentInitiationAdviceFile;
        model.PaymentInitiationAdviceFileState = PaymentInitiationAdviceFileState_1.PaymentInitiationAdviceFileState;
        model.PaymentLink = PaymentLink_1.PaymentLink;
        model.PaymentLinkAddressHandlingMode = PaymentLinkAddressHandlingMode_1.PaymentLinkAddressHandlingMode;
        model.PaymentLinkProtectionMode = PaymentLinkProtectionMode_1.PaymentLinkProtectionMode;
        model.PaymentLinkUpdate = PaymentLinkUpdate_1.PaymentLinkUpdate;
        model.PaymentMethod = PaymentMethod_1.PaymentMethod;
        model.PaymentMethodBrand = PaymentMethodBrand_1.PaymentMethodBrand;
        model.PaymentMethodConfiguration = PaymentMethodConfiguration_1.PaymentMethodConfiguration;
        model.PaymentPrimaryRiskTaker = PaymentPrimaryRiskTaker_1.PaymentPrimaryRiskTaker;
        model.PaymentProcessor = PaymentProcessor_1.PaymentProcessor;
        model.PaymentProcessorConfiguration = PaymentProcessorConfiguration_1.PaymentProcessorConfiguration;
        model.PaymentTerminal = PaymentTerminal_1.PaymentTerminal;
        model.PaymentTerminalAddress = PaymentTerminalAddress_1.PaymentTerminalAddress;
        model.PaymentTerminalConfiguration = PaymentTerminalConfiguration_1.PaymentTerminalConfiguration;
        model.PaymentTerminalConfigurationState = PaymentTerminalConfigurationState_1.PaymentTerminalConfigurationState;
        model.PaymentTerminalConfigurationVersion = PaymentTerminalConfigurationVersion_1.PaymentTerminalConfigurationVersion;
        model.PaymentTerminalConfigurationVersionState = PaymentTerminalConfigurationVersionState_1.PaymentTerminalConfigurationVersionState;
        model.PaymentTerminalDccTransactionSum = PaymentTerminalDccTransactionSum_1.PaymentTerminalDccTransactionSum;
        model.PaymentTerminalLocation = PaymentTerminalLocation_1.PaymentTerminalLocation;
        model.PaymentTerminalLocationState = PaymentTerminalLocationState_1.PaymentTerminalLocationState;
        model.PaymentTerminalLocationVersion = PaymentTerminalLocationVersion_1.PaymentTerminalLocationVersion;
        model.PaymentTerminalLocationVersionState = PaymentTerminalLocationVersionState_1.PaymentTerminalLocationVersionState;
        model.PaymentTerminalReceiptType = PaymentTerminalReceiptType_1.PaymentTerminalReceiptType;
        model.PaymentTerminalState = PaymentTerminalState_1.PaymentTerminalState;
        model.PaymentTerminalTransactionSum = PaymentTerminalTransactionSum_1.PaymentTerminalTransactionSum;
        model.PaymentTerminalTransactionSummary = PaymentTerminalTransactionSummary_1.PaymentTerminalTransactionSummary;
        model.PaymentTerminalTransactionSummaryFetchRequest = PaymentTerminalTransactionSummaryFetchRequest_1.PaymentTerminalTransactionSummaryFetchRequest;
        model.PaymentTerminalType = PaymentTerminalType_1.PaymentTerminalType;
        model.Permission = Permission_1.Permission;
        model.Refund = Refund_1.Refund;
        model.RefundComment = RefundComment_1.RefundComment;
        model.RefundCreate = RefundCreate_1.RefundCreate;
        model.RefundState = RefundState_1.RefundState;
        model.RefundType = RefundType_1.RefundType;
        model.RenderedDocument = RenderedDocument_1.RenderedDocument;
        model.RenderedTerminalReceipt = RenderedTerminalReceipt_1.RenderedTerminalReceipt;
        model.RenderedTerminalTransactionSummary = RenderedTerminalTransactionSummary_1.RenderedTerminalTransactionSummary;
        model.ResourcePath = ResourcePath_1.ResourcePath;
        model.ResourceState = ResourceState_1.ResourceState;
        model.RestAddressFormat = RestAddressFormat_1.RestAddressFormat;
        model.RestAddressFormatField = RestAddressFormatField_1.RestAddressFormatField;
        model.RestCountry = RestCountry_1.RestCountry;
        model.RestCountryState = RestCountryState_1.RestCountryState;
        model.RestCurrency = RestCurrency_1.RestCurrency;
        model.RestLanguage = RestLanguage_1.RestLanguage;
        model.Role = Role_1.Role;
        model.RoleState = RoleState_1.RoleState;
        model.SalesChannel = SalesChannel_1.SalesChannel;
        model.Scope = Scope_1.Scope;
        model.ServerError = ServerError_1.ServerError;
        model.ShopifyAdditionalLineItemData = ShopifyAdditionalLineItemData_1.ShopifyAdditionalLineItemData;
        model.ShopifyIntegration = ShopifyIntegration_1.ShopifyIntegration;
        model.ShopifyIntegrationPaymentAppVersion = ShopifyIntegrationPaymentAppVersion_1.ShopifyIntegrationPaymentAppVersion;
        model.ShopifyIntegrationSubscriptionAppVersion = ShopifyIntegrationSubscriptionAppVersion_1.ShopifyIntegrationSubscriptionAppVersion;
        model.ShopifyRecurringOrderState = ShopifyRecurringOrderState_1.ShopifyRecurringOrderState;
        model.ShopifyRecurringOrderUpdateRequest = ShopifyRecurringOrderUpdateRequest_1.ShopifyRecurringOrderUpdateRequest;
        model.ShopifySubscriber = ShopifySubscriber_1.ShopifySubscriber;
        model.ShopifySubscriberActive = ShopifySubscriberActive_1.ShopifySubscriberActive;
        model.ShopifySubscriberCreation = ShopifySubscriberCreation_1.ShopifySubscriberCreation;
        model.ShopifySubscriberState = ShopifySubscriberState_1.ShopifySubscriberState;
        model.ShopifySubscription = ShopifySubscription_1.ShopifySubscription;
        model.ShopifySubscriptionAddressCreate = ShopifySubscriptionAddressCreate_1.ShopifySubscriptionAddressCreate;
        model.ShopifySubscriptionBillingIntervalUnit = ShopifySubscriptionBillingIntervalUnit_1.ShopifySubscriptionBillingIntervalUnit;
        model.ShopifySubscriptionCreationRequest = ShopifySubscriptionCreationRequest_1.ShopifySubscriptionCreationRequest;
        model.ShopifySubscriptionModelBillingConfiguration = ShopifySubscriptionModelBillingConfiguration_1.ShopifySubscriptionModelBillingConfiguration;
        model.ShopifySubscriptionModelItem = ShopifySubscriptionModelItem_1.ShopifySubscriptionModelItem;
        model.ShopifySubscriptionModelTaxLine = ShopifySubscriptionModelTaxLine_1.ShopifySubscriptionModelTaxLine;
        model.ShopifySubscriptionProduct = ShopifySubscriptionProduct_1.ShopifySubscriptionProduct;
        model.ShopifySubscriptionProductPricingOption = ShopifySubscriptionProductPricingOption_1.ShopifySubscriptionProductPricingOption;
        model.ShopifySubscriptionProductState = ShopifySubscriptionProductState_1.ShopifySubscriptionProductState;
        model.ShopifySubscriptionState = ShopifySubscriptionState_1.ShopifySubscriptionState;
        model.ShopifySubscriptionSuspension = ShopifySubscriptionSuspension_1.ShopifySubscriptionSuspension;
        model.ShopifySubscriptionSuspensionCreate = ShopifySubscriptionSuspensionCreate_1.ShopifySubscriptionSuspensionCreate;
        model.ShopifySubscriptionSuspensionInitiator = ShopifySubscriptionSuspensionInitiator_1.ShopifySubscriptionSuspensionInitiator;
        model.ShopifySubscriptionSuspensionState = ShopifySubscriptionSuspensionState_1.ShopifySubscriptionSuspensionState;
        model.ShopifySubscriptionSuspensionType = ShopifySubscriptionSuspensionType_1.ShopifySubscriptionSuspensionType;
        model.ShopifySubscriptionUpdateAddressesRequest = ShopifySubscriptionUpdateAddressesRequest_1.ShopifySubscriptionUpdateAddressesRequest;
        model.ShopifySubscriptionUpdateRequest = ShopifySubscriptionUpdateRequest_1.ShopifySubscriptionUpdateRequest;
        model.ShopifySubscriptionVersion = ShopifySubscriptionVersion_1.ShopifySubscriptionVersion;
        model.ShopifySubscriptionVersionItem = ShopifySubscriptionVersionItem_1.ShopifySubscriptionVersionItem;
        model.ShopifySubscriptionVersionItemPriceStrategy = ShopifySubscriptionVersionItemPriceStrategy_1.ShopifySubscriptionVersionItemPriceStrategy;
        model.ShopifySubscriptionVersionState = ShopifySubscriptionVersionState_1.ShopifySubscriptionVersionState;
        model.ShopifySubscriptionWeekday = ShopifySubscriptionWeekday_1.ShopifySubscriptionWeekday;
        model.ShopifyTaxLine = ShopifyTaxLine_1.ShopifyTaxLine;
        model.ShopifyTransactionState = ShopifyTransactionState_1.ShopifyTransactionState;
        model.Space = Space_1.Space;
        model.SpaceAddress = SpaceAddress_1.SpaceAddress;
        model.SpaceAddressCreate = SpaceAddressCreate_1.SpaceAddressCreate;
        model.SpaceView = SpaceView_1.SpaceView;
        model.StaticValue = StaticValue_1.StaticValue;
        model.Tax = Tax_1.Tax;
        model.TaxCreate = TaxCreate_1.TaxCreate;
        model.TenantDatabase = TenantDatabase_1.TenantDatabase;
        model.TerminalReceiptFetchRequest = TerminalReceiptFetchRequest_1.TerminalReceiptFetchRequest;
        model.TerminalReceiptFormat = TerminalReceiptFormat_1.TerminalReceiptFormat;
        model.Token = Token_1.Token;
        model.TokenVersion = TokenVersion_1.TokenVersion;
        model.TokenVersionState = TokenVersionState_1.TokenVersionState;
        model.TokenVersionType = TokenVersionType_1.TokenVersionType;
        model.TokenizationMode = TokenizationMode_1.TokenizationMode;
        model.Transaction = Transaction_1.Transaction;
        model.TransactionAwareEntity = TransactionAwareEntity_1.TransactionAwareEntity;
        model.TransactionComment = TransactionComment_1.TransactionComment;
        model.TransactionCompletionBehavior = TransactionCompletionBehavior_1.TransactionCompletionBehavior;
        model.TransactionCompletionMode = TransactionCompletionMode_1.TransactionCompletionMode;
        model.TransactionCompletionRequest = TransactionCompletionRequest_1.TransactionCompletionRequest;
        model.TransactionCompletionState = TransactionCompletionState_1.TransactionCompletionState;
        model.TransactionEnvironmentSelectionStrategy = TransactionEnvironmentSelectionStrategy_1.TransactionEnvironmentSelectionStrategy;
        model.TransactionGroup = TransactionGroup_1.TransactionGroup;
        model.TransactionGroupState = TransactionGroupState_1.TransactionGroupState;
        model.TransactionInvoiceComment = TransactionInvoiceComment_1.TransactionInvoiceComment;
        model.TransactionInvoiceReplacement = TransactionInvoiceReplacement_1.TransactionInvoiceReplacement;
        model.TransactionInvoiceState = TransactionInvoiceState_1.TransactionInvoiceState;
        model.TransactionLineItemVersionCreate = TransactionLineItemVersionCreate_1.TransactionLineItemVersionCreate;
        model.TransactionLineItemVersionState = TransactionLineItemVersionState_1.TransactionLineItemVersionState;
        model.TransactionState = TransactionState_1.TransactionState;
        model.TransactionUserInterfaceType = TransactionUserInterfaceType_1.TransactionUserInterfaceType;
        model.TransactionVoidMode = TransactionVoidMode_1.TransactionVoidMode;
        model.TransactionVoidState = TransactionVoidState_1.TransactionVoidState;
        model.TwoFactorAuthenticationType = TwoFactorAuthenticationType_1.TwoFactorAuthenticationType;
        model.User = User_1.User;
        model.UserAccountRole = UserAccountRole_1.UserAccountRole;
        model.UserSpaceRole = UserSpaceRole_1.UserSpaceRole;
        model.UserType = UserType_1.UserType;
        model.WalletType = WalletType_1.WalletType;
        model.WebhookIdentity = WebhookIdentity_1.WebhookIdentity;
        model.WebhookListener = WebhookListener_1.WebhookListener;
        model.WebhookListenerEntity = WebhookListenerEntity_1.WebhookListenerEntity;
        model.WebhookUrl = WebhookUrl_1.WebhookUrl;
        model.AccountCreate = AccountCreate_1.AccountCreate;
        model.AccountUpdate = AccountUpdate_1.AccountUpdate;
        model.ApplicationUser = ApplicationUser_1.ApplicationUser;
        model.ApplicationUserCreate = ApplicationUserCreate_1.ApplicationUserCreate;
        model.ApplicationUserUpdate = ApplicationUserUpdate_1.ApplicationUserUpdate;
        model.Charge = Charge_1.Charge;
        model.ChargeAttempt = ChargeAttempt_1.ChargeAttempt;
        model.ChargeBankTransaction = ChargeBankTransaction_1.ChargeBankTransaction;
        model.ChargeFlowLevel = ChargeFlowLevel_1.ChargeFlowLevel;
        model.ChargeFlowLevelPaymentLink = ChargeFlowLevelPaymentLink_1.ChargeFlowLevelPaymentLink;
        model.ConnectorInvocation = ConnectorInvocation_1.ConnectorInvocation;
        model.CustomerActive = CustomerActive_1.CustomerActive;
        model.CustomerAddressActive = CustomerAddressActive_1.CustomerAddressActive;
        model.CustomerAddressCreate = CustomerAddressCreate_1.CustomerAddressCreate;
        model.CustomerCommentActive = CustomerCommentActive_1.CustomerCommentActive;
        model.CustomerCommentCreate = CustomerCommentCreate_1.CustomerCommentCreate;
        model.CustomerCreate = CustomerCreate_1.CustomerCreate;
        model.DeliveryIndication = DeliveryIndication_1.DeliveryIndication;
        model.HumanUserCreate = HumanUserCreate_1.HumanUserCreate;
        model.HumanUserUpdate = HumanUserUpdate_1.HumanUserUpdate;
        model.InvoiceReconciliationRecord = InvoiceReconciliationRecord_1.InvoiceReconciliationRecord;
        model.InvoiceReimbursementWithRefundReference = InvoiceReimbursementWithRefundReference_1.InvoiceReimbursementWithRefundReference;
        model.PaymentLinkActive = PaymentLinkActive_1.PaymentLinkActive;
        model.PaymentLinkCreate = PaymentLinkCreate_1.PaymentLinkCreate;
        model.RefundBankTransaction = RefundBankTransaction_1.RefundBankTransaction;
        model.RefundCommentActive = RefundCommentActive_1.RefundCommentActive;
        model.RefundCommentCreate = RefundCommentCreate_1.RefundCommentCreate;
        model.RefundRecoveryBankTransaction = RefundRecoveryBankTransaction_1.RefundRecoveryBankTransaction;
        model.ShopifyRecurringOrder = ShopifyRecurringOrder_1.ShopifyRecurringOrder;
        model.ShopifySubscriptionAddress = ShopifySubscriptionAddress_1.ShopifySubscriptionAddress;
        model.ShopifySubscriptionProductCreate = ShopifySubscriptionProductCreate_1.ShopifySubscriptionProductCreate;
        model.ShopifySubscriptionProductUpdate = ShopifySubscriptionProductUpdate_1.ShopifySubscriptionProductUpdate;
        model.ShopifyTransaction = ShopifyTransaction_1.ShopifyTransaction;
        model.SpaceCreate = SpaceCreate_1.SpaceCreate;
        model.SpaceUpdate = SpaceUpdate_1.SpaceUpdate;
        model.TokenCreate = TokenCreate_1.TokenCreate;
        model.TokenUpdate = TokenUpdate_1.TokenUpdate;
        model.TransactionCommentActive = TransactionCommentActive_1.TransactionCommentActive;
        model.TransactionCommentCreate = TransactionCommentCreate_1.TransactionCommentCreate;
        model.TransactionCompletion = TransactionCompletion_1.TransactionCompletion;
        model.TransactionCreate = TransactionCreate_1.TransactionCreate;
        model.TransactionInvoice = TransactionInvoice_1.TransactionInvoice;
        model.TransactionInvoiceCommentActive = TransactionInvoiceCommentActive_1.TransactionInvoiceCommentActive;
        model.TransactionInvoiceCommentCreate = TransactionInvoiceCommentCreate_1.TransactionInvoiceCommentCreate;
        model.TransactionLineItemVersion = TransactionLineItemVersion_1.TransactionLineItemVersion;
        model.TransactionPending = TransactionPending_1.TransactionPending;
        model.TransactionVoid = TransactionVoid_1.TransactionVoid;
        model.WebhookListenerCreate = WebhookListenerCreate_1.WebhookListenerCreate;
        model.WebhookListenerUpdate = WebhookListenerUpdate_1.WebhookListenerUpdate;
        model.WebhookUrlCreate = WebhookUrlCreate_1.WebhookUrlCreate;
        model.WebhookUrlUpdate = WebhookUrlUpdate_1.WebhookUrlUpdate;
        model.ApplicationUserCreateWithMacKey = ApplicationUserCreateWithMacKey_1.ApplicationUserCreateWithMacKey;
    })(model = PostFinanceCheckout.model || (PostFinanceCheckout.model = {}));
    let api;
    (function (api) {
        api.AccountService = AccountService_1.AccountService;
        api.AnalyticsQueryService = AnalyticsQueryService_1.AnalyticsQueryService;
        api.ApplicationUserService = ApplicationUserService_1.ApplicationUserService;
        api.BankAccountService = BankAccountService_1.BankAccountService;
        api.BankTransactionService = BankTransactionService_1.BankTransactionService;
        api.ChargeAttemptService = ChargeAttemptService_1.ChargeAttemptService;
        api.ChargeBankTransactionService = ChargeBankTransactionService_1.ChargeBankTransactionService;
        api.ChargeFlowLevelPaymentLinkService = ChargeFlowLevelPaymentLinkService_1.ChargeFlowLevelPaymentLinkService;
        api.ChargeFlowLevelService = ChargeFlowLevelService_1.ChargeFlowLevelService;
        api.ChargeFlowService = ChargeFlowService_1.ChargeFlowService;
        api.ConditionTypeService = ConditionTypeService_1.ConditionTypeService;
        api.CountryService = CountryService_1.CountryService;
        api.CountryStateService = CountryStateService_1.CountryStateService;
        api.CurrencyBankAccountService = CurrencyBankAccountService_1.CurrencyBankAccountService;
        api.CurrencyService = CurrencyService_1.CurrencyService;
        api.CustomerAddressService = CustomerAddressService_1.CustomerAddressService;
        api.CustomerCommentService = CustomerCommentService_1.CustomerCommentService;
        api.CustomerService = CustomerService_1.CustomerService;
        api.DeliveryIndicationService = DeliveryIndicationService_1.DeliveryIndicationService;
        api.DocumentTemplateService = DocumentTemplateService_1.DocumentTemplateService;
        api.DocumentTemplateTypeService = DocumentTemplateTypeService_1.DocumentTemplateTypeService;
        api.ExternalTransferBankTransactionService = ExternalTransferBankTransactionService_1.ExternalTransferBankTransactionService;
        api.HumanUserService = HumanUserService_1.HumanUserService;
        api.InternalTransferBankTransactionService = InternalTransferBankTransactionService_1.InternalTransferBankTransactionService;
        api.InvoiceReconciliationRecordInvoiceLinkService = InvoiceReconciliationRecordInvoiceLinkService_1.InvoiceReconciliationRecordInvoiceLinkService;
        api.InvoiceReconciliationRecordService = InvoiceReconciliationRecordService_1.InvoiceReconciliationRecordService;
        api.InvoiceReimbursementService = InvoiceReimbursementService_1.InvoiceReimbursementService;
        api.LabelDescriptionGroupService = LabelDescriptionGroupService_1.LabelDescriptionGroupService;
        api.LabelDescriptionService = LabelDescriptionService_1.LabelDescriptionService;
        api.LanguageService = LanguageService_1.LanguageService;
        api.LegalOrganizationFormService = LegalOrganizationFormService_1.LegalOrganizationFormService;
        api.ManualTaskService = ManualTaskService_1.ManualTaskService;
        api.PaymentConnectorConfigurationService = PaymentConnectorConfigurationService_1.PaymentConnectorConfigurationService;
        api.PaymentConnectorService = PaymentConnectorService_1.PaymentConnectorService;
        api.PaymentLinkService = PaymentLinkService_1.PaymentLinkService;
        api.PaymentMethodBrandService = PaymentMethodBrandService_1.PaymentMethodBrandService;
        api.PaymentMethodConfigurationService = PaymentMethodConfigurationService_1.PaymentMethodConfigurationService;
        api.PaymentMethodService = PaymentMethodService_1.PaymentMethodService;
        api.PaymentProcessorConfigurationService = PaymentProcessorConfigurationService_1.PaymentProcessorConfigurationService;
        api.PaymentProcessorService = PaymentProcessorService_1.PaymentProcessorService;
        api.PaymentTerminalService = PaymentTerminalService_1.PaymentTerminalService;
        api.PaymentTerminalTillService = PaymentTerminalTillService_1.PaymentTerminalTillService;
        api.PaymentTerminalTransactionSummaryService = PaymentTerminalTransactionSummaryService_1.PaymentTerminalTransactionSummaryService;
        api.PermissionService = PermissionService_1.PermissionService;
        api.RefundBankTransactionService = RefundBankTransactionService_1.RefundBankTransactionService;
        api.RefundCommentService = RefundCommentService_1.RefundCommentService;
        api.RefundRecoveryBankTransactionService = RefundRecoveryBankTransactionService_1.RefundRecoveryBankTransactionService;
        api.RefundService = RefundService_1.RefundService;
        api.ShopifyRecurringOrderService = ShopifyRecurringOrderService_1.ShopifyRecurringOrderService;
        api.ShopifySubscriberService = ShopifySubscriberService_1.ShopifySubscriberService;
        api.ShopifySubscriptionProductService = ShopifySubscriptionProductService_1.ShopifySubscriptionProductService;
        api.ShopifySubscriptionService = ShopifySubscriptionService_1.ShopifySubscriptionService;
        api.ShopifySubscriptionSuspensionService = ShopifySubscriptionSuspensionService_1.ShopifySubscriptionSuspensionService;
        api.ShopifySubscriptionVersionService = ShopifySubscriptionVersionService_1.ShopifySubscriptionVersionService;
        api.ShopifyTransactionService = ShopifyTransactionService_1.ShopifyTransactionService;
        api.SpaceService = SpaceService_1.SpaceService;
        api.StaticValueService = StaticValueService_1.StaticValueService;
        api.TokenService = TokenService_1.TokenService;
        api.TokenVersionService = TokenVersionService_1.TokenVersionService;
        api.TransactionCommentService = TransactionCommentService_1.TransactionCommentService;
        api.TransactionCompletionService = TransactionCompletionService_1.TransactionCompletionService;
        api.TransactionIframeService = TransactionIframeService_1.TransactionIframeService;
        api.TransactionInvoiceCommentService = TransactionInvoiceCommentService_1.TransactionInvoiceCommentService;
        api.TransactionInvoiceService = TransactionInvoiceService_1.TransactionInvoiceService;
        api.TransactionLightboxService = TransactionLightboxService_1.TransactionLightboxService;
        api.TransactionLineItemVersionService = TransactionLineItemVersionService_1.TransactionLineItemVersionService;
        api.TransactionMobileSdkService = TransactionMobileSdkService_1.TransactionMobileSdkService;
        api.TransactionPaymentPageService = TransactionPaymentPageService_1.TransactionPaymentPageService;
        api.TransactionService = TransactionService_1.TransactionService;
        api.TransactionTerminalService = TransactionTerminalService_1.TransactionTerminalService;
        api.TransactionVoidService = TransactionVoidService_1.TransactionVoidService;
        api.UserAccountRoleService = UserAccountRoleService_1.UserAccountRoleService;
        api.UserSpaceRoleService = UserSpaceRoleService_1.UserSpaceRoleService;
        api.WebhookListenerService = WebhookListenerService_1.WebhookListenerService;
        api.WebhookUrlService = WebhookUrlService_1.WebhookUrlService;
    })(api = PostFinanceCheckout.api || (PostFinanceCheckout.api = {}));
})(PostFinanceCheckout = exports.PostFinanceCheckout || (exports.PostFinanceCheckout = {}));
