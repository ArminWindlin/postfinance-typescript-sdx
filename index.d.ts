import { AbstractAccountUpdate as AbstractAccountUpdateModelImport } from "./src/models/AbstractAccountUpdate";
import { AbstractApplicationUserUpdate as AbstractApplicationUserUpdateModelImport } from "./src/models/AbstractApplicationUserUpdate";
import { AbstractCustomerActive as AbstractCustomerActiveModelImport } from "./src/models/AbstractCustomerActive";
import { AbstractCustomerAddressActive as AbstractCustomerAddressActiveModelImport } from "./src/models/AbstractCustomerAddressActive";
import { AbstractCustomerCommentActive as AbstractCustomerCommentActiveModelImport } from "./src/models/AbstractCustomerCommentActive";
import { AbstractHumanUserUpdate as AbstractHumanUserUpdateModelImport } from "./src/models/AbstractHumanUserUpdate";
import { AbstractPaymentLinkUpdate as AbstractPaymentLinkUpdateModelImport } from "./src/models/AbstractPaymentLinkUpdate";
import { AbstractRefundCommentActive as AbstractRefundCommentActiveModelImport } from "./src/models/AbstractRefundCommentActive";
import { AbstractShopifySubscriptionProductUpdate as AbstractShopifySubscriptionProductUpdateModelImport } from "./src/models/AbstractShopifySubscriptionProductUpdate";
import { AbstractSpaceUpdate as AbstractSpaceUpdateModelImport } from "./src/models/AbstractSpaceUpdate";
import { AbstractTokenUpdate as AbstractTokenUpdateModelImport } from "./src/models/AbstractTokenUpdate";
import { AbstractTransactionCommentActive as AbstractTransactionCommentActiveModelImport } from "./src/models/AbstractTransactionCommentActive";
import { AbstractTransactionInvoiceCommentActive as AbstractTransactionInvoiceCommentActiveModelImport } from "./src/models/AbstractTransactionInvoiceCommentActive";
import { AbstractTransactionPending as AbstractTransactionPendingModelImport } from "./src/models/AbstractTransactionPending";
import { AbstractWebhookListenerUpdate as AbstractWebhookListenerUpdateModelImport } from "./src/models/AbstractWebhookListenerUpdate";
import { AbstractWebhookUrlUpdate as AbstractWebhookUrlUpdateModelImport } from "./src/models/AbstractWebhookUrlUpdate";
import { Account as AccountModelImport } from "./src/models/Account";
import { AccountState as AccountStateModelImport } from "./src/models/AccountState";
import { AccountType as AccountTypeModelImport } from "./src/models/AccountType";
import { Address as AddressModelImport } from "./src/models/Address";
import { AddressCreate as AddressCreateModelImport } from "./src/models/AddressCreate";
import { AnalyticsQuery as AnalyticsQueryModelImport } from "./src/models/AnalyticsQuery";
import { AnalyticsQueryExecution as AnalyticsQueryExecutionModelImport } from "./src/models/AnalyticsQueryExecution";
import { AnalyticsQueryExecutionState as AnalyticsQueryExecutionStateModelImport } from "./src/models/AnalyticsQueryExecutionState";
import { AnalyticsQueryResultBatch as AnalyticsQueryResultBatchModelImport } from "./src/models/AnalyticsQueryResultBatch";
import { AnalyticsSchemaColumn as AnalyticsSchemaColumnModelImport } from "./src/models/AnalyticsSchemaColumn";
import { AnalyticsSchemaTable as AnalyticsSchemaTableModelImport } from "./src/models/AnalyticsSchemaTable";
import { BankAccount as BankAccountModelImport } from "./src/models/BankAccount";
import { BankAccountEnvironment as BankAccountEnvironmentModelImport } from "./src/models/BankAccountEnvironment";
import { BankAccountState as BankAccountStateModelImport } from "./src/models/BankAccountState";
import { BankAccountType as BankAccountTypeModelImport } from "./src/models/BankAccountType";
import { BankTransaction as BankTransactionModelImport } from "./src/models/BankTransaction";
import { BankTransactionFlowDirection as BankTransactionFlowDirectionModelImport } from "./src/models/BankTransactionFlowDirection";
import { BankTransactionSource as BankTransactionSourceModelImport } from "./src/models/BankTransactionSource";
import { BankTransactionState as BankTransactionStateModelImport } from "./src/models/BankTransactionState";
import { BankTransactionType as BankTransactionTypeModelImport } from "./src/models/BankTransactionType";
import { ChargeAttemptEnvironment as ChargeAttemptEnvironmentModelImport } from "./src/models/ChargeAttemptEnvironment";
import { ChargeAttemptState as ChargeAttemptStateModelImport } from "./src/models/ChargeAttemptState";
import { ChargeFlow as ChargeFlowModelImport } from "./src/models/ChargeFlow";
import { ChargeFlowLevelConfiguration as ChargeFlowLevelConfigurationModelImport } from "./src/models/ChargeFlowLevelConfiguration";
import { ChargeFlowLevelConfigurationType as ChargeFlowLevelConfigurationTypeModelImport } from "./src/models/ChargeFlowLevelConfigurationType";
import { ChargeFlowLevelState as ChargeFlowLevelStateModelImport } from "./src/models/ChargeFlowLevelState";
import { ChargeState as ChargeStateModelImport } from "./src/models/ChargeState";
import { ChargeType as ChargeTypeModelImport } from "./src/models/ChargeType";
import { ClientError as ClientErrorModelImport } from "./src/models/ClientError";
import { ClientErrorType as ClientErrorTypeModelImport } from "./src/models/ClientErrorType";
import { CompletionLineItem as CompletionLineItemModelImport } from "./src/models/CompletionLineItem";
import { CompletionLineItemCreate as CompletionLineItemCreateModelImport } from "./src/models/CompletionLineItemCreate";
import { Condition as ConditionModelImport } from "./src/models/Condition";
import { ConditionType as ConditionTypeModelImport } from "./src/models/ConditionType";
import { ConnectorInvocationStage as ConnectorInvocationStageModelImport } from "./src/models/ConnectorInvocationStage";
import { CreationEntityState as CreationEntityStateModelImport } from "./src/models/CreationEntityState";
import { CriteriaOperator as CriteriaOperatorModelImport } from "./src/models/CriteriaOperator";
import { CurrencyBankAccount as CurrencyBankAccountModelImport } from "./src/models/CurrencyBankAccount";
import { Customer as CustomerModelImport } from "./src/models/Customer";
import { CustomerAddress as CustomerAddressModelImport } from "./src/models/CustomerAddress";
import { CustomerAddressType as CustomerAddressTypeModelImport } from "./src/models/CustomerAddressType";
import { CustomerComment as CustomerCommentModelImport } from "./src/models/CustomerComment";
import { CustomerPostalAddress as CustomerPostalAddressModelImport } from "./src/models/CustomerPostalAddress";
import { CustomerPostalAddressCreate as CustomerPostalAddressCreateModelImport } from "./src/models/CustomerPostalAddressCreate";
import { CustomersPresence as CustomersPresenceModelImport } from "./src/models/CustomersPresence";
import { DataCollectionType as DataCollectionTypeModelImport } from "./src/models/DataCollectionType";
import { DatabaseTranslatedString as DatabaseTranslatedStringModelImport } from "./src/models/DatabaseTranslatedString";
import { DatabaseTranslatedStringItem as DatabaseTranslatedStringItemModelImport } from "./src/models/DatabaseTranslatedStringItem";
import { DeliveryIndicationDecisionReason as DeliveryIndicationDecisionReasonModelImport } from "./src/models/DeliveryIndicationDecisionReason";
import { DeliveryIndicationState as DeliveryIndicationStateModelImport } from "./src/models/DeliveryIndicationState";
import { DocumentTemplate as DocumentTemplateModelImport } from "./src/models/DocumentTemplate";
import { DocumentTemplateType as DocumentTemplateTypeModelImport } from "./src/models/DocumentTemplateType";
import { DocumentTemplateTypeGroup as DocumentTemplateTypeGroupModelImport } from "./src/models/DocumentTemplateTypeGroup";
import { EntityExportRequest as EntityExportRequestModelImport } from "./src/models/EntityExportRequest";
import { EntityQuery as EntityQueryModelImport } from "./src/models/EntityQuery";
import { EntityQueryFilter as EntityQueryFilterModelImport } from "./src/models/EntityQueryFilter";
import { EntityQueryFilterType as EntityQueryFilterTypeModelImport } from "./src/models/EntityQueryFilterType";
import { EntityQueryOrderBy as EntityQueryOrderByModelImport } from "./src/models/EntityQueryOrderBy";
import { EntityQueryOrderByType as EntityQueryOrderByTypeModelImport } from "./src/models/EntityQueryOrderByType";
import { Environment as EnvironmentModelImport } from "./src/models/Environment";
import { ExternalTransferBankTransaction as ExternalTransferBankTransactionModelImport } from "./src/models/ExternalTransferBankTransaction";
import { FailureCategory as FailureCategoryModelImport } from "./src/models/FailureCategory";
import { FailureReason as FailureReasonModelImport } from "./src/models/FailureReason";
import { Feature as FeatureModelImport } from "./src/models/Feature";
import { FeatureCategory as FeatureCategoryModelImport } from "./src/models/FeatureCategory";
import { Gender as GenderModelImport } from "./src/models/Gender";
import { HumanUser as HumanUserModelImport } from "./src/models/HumanUser";
import { InternalTransferBankTransaction as InternalTransferBankTransactionModelImport } from "./src/models/InternalTransferBankTransaction";
import { InvoiceReconciliationRecordInvoiceLink as InvoiceReconciliationRecordInvoiceLinkModelImport } from "./src/models/InvoiceReconciliationRecordInvoiceLink";
import { InvoiceReconciliationRecordRejectionStatus as InvoiceReconciliationRecordRejectionStatusModelImport } from "./src/models/InvoiceReconciliationRecordRejectionStatus";
import { InvoiceReconciliationRecordState as InvoiceReconciliationRecordStateModelImport } from "./src/models/InvoiceReconciliationRecordState";
import { InvoiceReconciliationRecordType as InvoiceReconciliationRecordTypeModelImport } from "./src/models/InvoiceReconciliationRecordType";
import { InvoiceReimbursement as InvoiceReimbursementModelImport } from "./src/models/InvoiceReimbursement";
import { InvoiceReimbursementState as InvoiceReimbursementStateModelImport } from "./src/models/InvoiceReimbursementState";
import { Label as LabelModelImport } from "./src/models/Label";
import { LabelDescriptor as LabelDescriptorModelImport } from "./src/models/LabelDescriptor";
import { LabelDescriptorCategory as LabelDescriptorCategoryModelImport } from "./src/models/LabelDescriptorCategory";
import { LabelDescriptorGroup as LabelDescriptorGroupModelImport } from "./src/models/LabelDescriptorGroup";
import { LabelDescriptorType as LabelDescriptorTypeModelImport } from "./src/models/LabelDescriptorType";
import { LegalOrganizationForm as LegalOrganizationFormModelImport } from "./src/models/LegalOrganizationForm";
import { LineItem as LineItemModelImport } from "./src/models/LineItem";
import { LineItemAttribute as LineItemAttributeModelImport } from "./src/models/LineItemAttribute";
import { LineItemAttributeCreate as LineItemAttributeCreateModelImport } from "./src/models/LineItemAttributeCreate";
import { LineItemCreate as LineItemCreateModelImport } from "./src/models/LineItemCreate";
import { LineItemReduction as LineItemReductionModelImport } from "./src/models/LineItemReduction";
import { LineItemReductionCreate as LineItemReductionCreateModelImport } from "./src/models/LineItemReductionCreate";
import { LineItemType as LineItemTypeModelImport } from "./src/models/LineItemType";
import { LocalizedString as LocalizedStringModelImport } from "./src/models/LocalizedString";
import { ManualTask as ManualTaskModelImport } from "./src/models/ManualTask";
import { ManualTaskAction as ManualTaskActionModelImport } from "./src/models/ManualTaskAction";
import { ManualTaskActionStyle as ManualTaskActionStyleModelImport } from "./src/models/ManualTaskActionStyle";
import { ManualTaskState as ManualTaskStateModelImport } from "./src/models/ManualTaskState";
import { ManualTaskType as ManualTaskTypeModelImport } from "./src/models/ManualTaskType";
import { OneClickPaymentMode as OneClickPaymentModeModelImport } from "./src/models/OneClickPaymentMode";
import { PaymentAdjustment as PaymentAdjustmentModelImport } from "./src/models/PaymentAdjustment";
import { PaymentAdjustmentType as PaymentAdjustmentTypeModelImport } from "./src/models/PaymentAdjustmentType";
import { PaymentConnector as PaymentConnectorModelImport } from "./src/models/PaymentConnector";
import { PaymentConnectorConfiguration as PaymentConnectorConfigurationModelImport } from "./src/models/PaymentConnectorConfiguration";
import { PaymentConnectorFeature as PaymentConnectorFeatureModelImport } from "./src/models/PaymentConnectorFeature";
import { PaymentContract as PaymentContractModelImport } from "./src/models/PaymentContract";
import { PaymentContractState as PaymentContractStateModelImport } from "./src/models/PaymentContractState";
import { PaymentContractType as PaymentContractTypeModelImport } from "./src/models/PaymentContractType";
import { PaymentInformationHash as PaymentInformationHashModelImport } from "./src/models/PaymentInformationHash";
import { PaymentInformationHashType as PaymentInformationHashTypeModelImport } from "./src/models/PaymentInformationHashType";
import { PaymentInitiationAdviceFile as PaymentInitiationAdviceFileModelImport } from "./src/models/PaymentInitiationAdviceFile";
import { PaymentInitiationAdviceFileState as PaymentInitiationAdviceFileStateModelImport } from "./src/models/PaymentInitiationAdviceFileState";
import { PaymentLink as PaymentLinkModelImport } from "./src/models/PaymentLink";
import { PaymentLinkAddressHandlingMode as PaymentLinkAddressHandlingModeModelImport } from "./src/models/PaymentLinkAddressHandlingMode";
import { PaymentLinkProtectionMode as PaymentLinkProtectionModeModelImport } from "./src/models/PaymentLinkProtectionMode";
import { PaymentLinkUpdate as PaymentLinkUpdateModelImport } from "./src/models/PaymentLinkUpdate";
import { PaymentMethod as PaymentMethodModelImport } from "./src/models/PaymentMethod";
import { PaymentMethodBrand as PaymentMethodBrandModelImport } from "./src/models/PaymentMethodBrand";
import { PaymentMethodConfiguration as PaymentMethodConfigurationModelImport } from "./src/models/PaymentMethodConfiguration";
import { PaymentPrimaryRiskTaker as PaymentPrimaryRiskTakerModelImport } from "./src/models/PaymentPrimaryRiskTaker";
import { PaymentProcessor as PaymentProcessorModelImport } from "./src/models/PaymentProcessor";
import { PaymentProcessorConfiguration as PaymentProcessorConfigurationModelImport } from "./src/models/PaymentProcessorConfiguration";
import { PaymentTerminal as PaymentTerminalModelImport } from "./src/models/PaymentTerminal";
import { PaymentTerminalAddress as PaymentTerminalAddressModelImport } from "./src/models/PaymentTerminalAddress";
import { PaymentTerminalConfiguration as PaymentTerminalConfigurationModelImport } from "./src/models/PaymentTerminalConfiguration";
import { PaymentTerminalConfigurationState as PaymentTerminalConfigurationStateModelImport } from "./src/models/PaymentTerminalConfigurationState";
import { PaymentTerminalConfigurationVersion as PaymentTerminalConfigurationVersionModelImport } from "./src/models/PaymentTerminalConfigurationVersion";
import { PaymentTerminalConfigurationVersionState as PaymentTerminalConfigurationVersionStateModelImport } from "./src/models/PaymentTerminalConfigurationVersionState";
import { PaymentTerminalDccTransactionSum as PaymentTerminalDccTransactionSumModelImport } from "./src/models/PaymentTerminalDccTransactionSum";
import { PaymentTerminalLocation as PaymentTerminalLocationModelImport } from "./src/models/PaymentTerminalLocation";
import { PaymentTerminalLocationState as PaymentTerminalLocationStateModelImport } from "./src/models/PaymentTerminalLocationState";
import { PaymentTerminalLocationVersion as PaymentTerminalLocationVersionModelImport } from "./src/models/PaymentTerminalLocationVersion";
import { PaymentTerminalLocationVersionState as PaymentTerminalLocationVersionStateModelImport } from "./src/models/PaymentTerminalLocationVersionState";
import { PaymentTerminalReceiptType as PaymentTerminalReceiptTypeModelImport } from "./src/models/PaymentTerminalReceiptType";
import { PaymentTerminalState as PaymentTerminalStateModelImport } from "./src/models/PaymentTerminalState";
import { PaymentTerminalTransactionSum as PaymentTerminalTransactionSumModelImport } from "./src/models/PaymentTerminalTransactionSum";
import { PaymentTerminalTransactionSummary as PaymentTerminalTransactionSummaryModelImport } from "./src/models/PaymentTerminalTransactionSummary";
import { PaymentTerminalTransactionSummaryFetchRequest as PaymentTerminalTransactionSummaryFetchRequestModelImport } from "./src/models/PaymentTerminalTransactionSummaryFetchRequest";
import { PaymentTerminalType as PaymentTerminalTypeModelImport } from "./src/models/PaymentTerminalType";
import { Permission as PermissionModelImport } from "./src/models/Permission";
import { Refund as RefundModelImport } from "./src/models/Refund";
import { RefundComment as RefundCommentModelImport } from "./src/models/RefundComment";
import { RefundCreate as RefundCreateModelImport } from "./src/models/RefundCreate";
import { RefundState as RefundStateModelImport } from "./src/models/RefundState";
import { RefundType as RefundTypeModelImport } from "./src/models/RefundType";
import { RenderedDocument as RenderedDocumentModelImport } from "./src/models/RenderedDocument";
import { RenderedTerminalReceipt as RenderedTerminalReceiptModelImport } from "./src/models/RenderedTerminalReceipt";
import { RenderedTerminalTransactionSummary as RenderedTerminalTransactionSummaryModelImport } from "./src/models/RenderedTerminalTransactionSummary";
import { ResourcePath as ResourcePathModelImport } from "./src/models/ResourcePath";
import { ResourceState as ResourceStateModelImport } from "./src/models/ResourceState";
import { RestAddressFormat as RestAddressFormatModelImport } from "./src/models/RestAddressFormat";
import { RestAddressFormatField as RestAddressFormatFieldModelImport } from "./src/models/RestAddressFormatField";
import { RestCountry as RestCountryModelImport } from "./src/models/RestCountry";
import { RestCountryState as RestCountryStateModelImport } from "./src/models/RestCountryState";
import { RestCurrency as RestCurrencyModelImport } from "./src/models/RestCurrency";
import { RestLanguage as RestLanguageModelImport } from "./src/models/RestLanguage";
import { Role as RoleModelImport } from "./src/models/Role";
import { RoleState as RoleStateModelImport } from "./src/models/RoleState";
import { SalesChannel as SalesChannelModelImport } from "./src/models/SalesChannel";
import { Scope as ScopeModelImport } from "./src/models/Scope";
import { ServerError as ServerErrorModelImport } from "./src/models/ServerError";
import { ShopifyAdditionalLineItemData as ShopifyAdditionalLineItemDataModelImport } from "./src/models/ShopifyAdditionalLineItemData";
import { ShopifyIntegration as ShopifyIntegrationModelImport } from "./src/models/ShopifyIntegration";
import { ShopifyIntegrationPaymentAppVersion as ShopifyIntegrationPaymentAppVersionModelImport } from "./src/models/ShopifyIntegrationPaymentAppVersion";
import { ShopifyIntegrationSubscriptionAppVersion as ShopifyIntegrationSubscriptionAppVersionModelImport } from "./src/models/ShopifyIntegrationSubscriptionAppVersion";
import { ShopifyRecurringOrderState as ShopifyRecurringOrderStateModelImport } from "./src/models/ShopifyRecurringOrderState";
import { ShopifyRecurringOrderUpdateRequest as ShopifyRecurringOrderUpdateRequestModelImport } from "./src/models/ShopifyRecurringOrderUpdateRequest";
import { ShopifySubscriber as ShopifySubscriberModelImport } from "./src/models/ShopifySubscriber";
import { ShopifySubscriberActive as ShopifySubscriberActiveModelImport } from "./src/models/ShopifySubscriberActive";
import { ShopifySubscriberCreation as ShopifySubscriberCreationModelImport } from "./src/models/ShopifySubscriberCreation";
import { ShopifySubscriberState as ShopifySubscriberStateModelImport } from "./src/models/ShopifySubscriberState";
import { ShopifySubscription as ShopifySubscriptionModelImport } from "./src/models/ShopifySubscription";
import { ShopifySubscriptionAddressCreate as ShopifySubscriptionAddressCreateModelImport } from "./src/models/ShopifySubscriptionAddressCreate";
import { ShopifySubscriptionBillingIntervalUnit as ShopifySubscriptionBillingIntervalUnitModelImport } from "./src/models/ShopifySubscriptionBillingIntervalUnit";
import { ShopifySubscriptionCreationRequest as ShopifySubscriptionCreationRequestModelImport } from "./src/models/ShopifySubscriptionCreationRequest";
import { ShopifySubscriptionModelBillingConfiguration as ShopifySubscriptionModelBillingConfigurationModelImport } from "./src/models/ShopifySubscriptionModelBillingConfiguration";
import { ShopifySubscriptionModelItem as ShopifySubscriptionModelItemModelImport } from "./src/models/ShopifySubscriptionModelItem";
import { ShopifySubscriptionModelTaxLine as ShopifySubscriptionModelTaxLineModelImport } from "./src/models/ShopifySubscriptionModelTaxLine";
import { ShopifySubscriptionProduct as ShopifySubscriptionProductModelImport } from "./src/models/ShopifySubscriptionProduct";
import { ShopifySubscriptionProductPricingOption as ShopifySubscriptionProductPricingOptionModelImport } from "./src/models/ShopifySubscriptionProductPricingOption";
import { ShopifySubscriptionProductState as ShopifySubscriptionProductStateModelImport } from "./src/models/ShopifySubscriptionProductState";
import { ShopifySubscriptionState as ShopifySubscriptionStateModelImport } from "./src/models/ShopifySubscriptionState";
import { ShopifySubscriptionSuspension as ShopifySubscriptionSuspensionModelImport } from "./src/models/ShopifySubscriptionSuspension";
import { ShopifySubscriptionSuspensionCreate as ShopifySubscriptionSuspensionCreateModelImport } from "./src/models/ShopifySubscriptionSuspensionCreate";
import { ShopifySubscriptionSuspensionInitiator as ShopifySubscriptionSuspensionInitiatorModelImport } from "./src/models/ShopifySubscriptionSuspensionInitiator";
import { ShopifySubscriptionSuspensionState as ShopifySubscriptionSuspensionStateModelImport } from "./src/models/ShopifySubscriptionSuspensionState";
import { ShopifySubscriptionSuspensionType as ShopifySubscriptionSuspensionTypeModelImport } from "./src/models/ShopifySubscriptionSuspensionType";
import { ShopifySubscriptionUpdateAddressesRequest as ShopifySubscriptionUpdateAddressesRequestModelImport } from "./src/models/ShopifySubscriptionUpdateAddressesRequest";
import { ShopifySubscriptionUpdateRequest as ShopifySubscriptionUpdateRequestModelImport } from "./src/models/ShopifySubscriptionUpdateRequest";
import { ShopifySubscriptionVersion as ShopifySubscriptionVersionModelImport } from "./src/models/ShopifySubscriptionVersion";
import { ShopifySubscriptionVersionItem as ShopifySubscriptionVersionItemModelImport } from "./src/models/ShopifySubscriptionVersionItem";
import { ShopifySubscriptionVersionItemPriceStrategy as ShopifySubscriptionVersionItemPriceStrategyModelImport } from "./src/models/ShopifySubscriptionVersionItemPriceStrategy";
import { ShopifySubscriptionVersionState as ShopifySubscriptionVersionStateModelImport } from "./src/models/ShopifySubscriptionVersionState";
import { ShopifySubscriptionWeekday as ShopifySubscriptionWeekdayModelImport } from "./src/models/ShopifySubscriptionWeekday";
import { ShopifyTaxLine as ShopifyTaxLineModelImport } from "./src/models/ShopifyTaxLine";
import { ShopifyTransactionState as ShopifyTransactionStateModelImport } from "./src/models/ShopifyTransactionState";
import { Space as SpaceModelImport } from "./src/models/Space";
import { SpaceAddress as SpaceAddressModelImport } from "./src/models/SpaceAddress";
import { SpaceAddressCreate as SpaceAddressCreateModelImport } from "./src/models/SpaceAddressCreate";
import { SpaceView as SpaceViewModelImport } from "./src/models/SpaceView";
import { StaticValue as StaticValueModelImport } from "./src/models/StaticValue";
import { Tax as TaxModelImport } from "./src/models/Tax";
import { TaxCreate as TaxCreateModelImport } from "./src/models/TaxCreate";
import { TenantDatabase as TenantDatabaseModelImport } from "./src/models/TenantDatabase";
import { TerminalReceiptFetchRequest as TerminalReceiptFetchRequestModelImport } from "./src/models/TerminalReceiptFetchRequest";
import { TerminalReceiptFormat as TerminalReceiptFormatModelImport } from "./src/models/TerminalReceiptFormat";
import { Token as TokenModelImport } from "./src/models/Token";
import { TokenVersion as TokenVersionModelImport } from "./src/models/TokenVersion";
import { TokenVersionState as TokenVersionStateModelImport } from "./src/models/TokenVersionState";
import { TokenVersionType as TokenVersionTypeModelImport } from "./src/models/TokenVersionType";
import { TokenizationMode as TokenizationModeModelImport } from "./src/models/TokenizationMode";
import { Transaction as TransactionModelImport } from "./src/models/Transaction";
import { TransactionAwareEntity as TransactionAwareEntityModelImport } from "./src/models/TransactionAwareEntity";
import { TransactionComment as TransactionCommentModelImport } from "./src/models/TransactionComment";
import { TransactionCompletionBehavior as TransactionCompletionBehaviorModelImport } from "./src/models/TransactionCompletionBehavior";
import { TransactionCompletionMode as TransactionCompletionModeModelImport } from "./src/models/TransactionCompletionMode";
import { TransactionCompletionRequest as TransactionCompletionRequestModelImport } from "./src/models/TransactionCompletionRequest";
import { TransactionCompletionState as TransactionCompletionStateModelImport } from "./src/models/TransactionCompletionState";
import { TransactionEnvironmentSelectionStrategy as TransactionEnvironmentSelectionStrategyModelImport } from "./src/models/TransactionEnvironmentSelectionStrategy";
import { TransactionGroup as TransactionGroupModelImport } from "./src/models/TransactionGroup";
import { TransactionGroupState as TransactionGroupStateModelImport } from "./src/models/TransactionGroupState";
import { TransactionInvoiceComment as TransactionInvoiceCommentModelImport } from "./src/models/TransactionInvoiceComment";
import { TransactionInvoiceReplacement as TransactionInvoiceReplacementModelImport } from "./src/models/TransactionInvoiceReplacement";
import { TransactionInvoiceState as TransactionInvoiceStateModelImport } from "./src/models/TransactionInvoiceState";
import { TransactionLineItemVersionCreate as TransactionLineItemVersionCreateModelImport } from "./src/models/TransactionLineItemVersionCreate";
import { TransactionLineItemVersionState as TransactionLineItemVersionStateModelImport } from "./src/models/TransactionLineItemVersionState";
import { TransactionState as TransactionStateModelImport } from "./src/models/TransactionState";
import { TransactionUserInterfaceType as TransactionUserInterfaceTypeModelImport } from "./src/models/TransactionUserInterfaceType";
import { TransactionVoidMode as TransactionVoidModeModelImport } from "./src/models/TransactionVoidMode";
import { TransactionVoidState as TransactionVoidStateModelImport } from "./src/models/TransactionVoidState";
import { TwoFactorAuthenticationType as TwoFactorAuthenticationTypeModelImport } from "./src/models/TwoFactorAuthenticationType";
import { User as UserModelImport } from "./src/models/User";
import { UserAccountRole as UserAccountRoleModelImport } from "./src/models/UserAccountRole";
import { UserSpaceRole as UserSpaceRoleModelImport } from "./src/models/UserSpaceRole";
import { UserType as UserTypeModelImport } from "./src/models/UserType";
import { WalletType as WalletTypeModelImport } from "./src/models/WalletType";
import { WebhookIdentity as WebhookIdentityModelImport } from "./src/models/WebhookIdentity";
import { WebhookListener as WebhookListenerModelImport } from "./src/models/WebhookListener";
import { WebhookListenerEntity as WebhookListenerEntityModelImport } from "./src/models/WebhookListenerEntity";
import { WebhookUrl as WebhookUrlModelImport } from "./src/models/WebhookUrl";
import { AccountCreate as AccountCreateModelImport } from "./src/models/AccountCreate";
import { AccountUpdate as AccountUpdateModelImport } from "./src/models/AccountUpdate";
import { ApplicationUser as ApplicationUserModelImport } from "./src/models/ApplicationUser";
import { ApplicationUserCreate as ApplicationUserCreateModelImport } from "./src/models/ApplicationUserCreate";
import { ApplicationUserUpdate as ApplicationUserUpdateModelImport } from "./src/models/ApplicationUserUpdate";
import { Charge as ChargeModelImport } from "./src/models/Charge";
import { ChargeAttempt as ChargeAttemptModelImport } from "./src/models/ChargeAttempt";
import { ChargeBankTransaction as ChargeBankTransactionModelImport } from "./src/models/ChargeBankTransaction";
import { ChargeFlowLevel as ChargeFlowLevelModelImport } from "./src/models/ChargeFlowLevel";
import { ChargeFlowLevelPaymentLink as ChargeFlowLevelPaymentLinkModelImport } from "./src/models/ChargeFlowLevelPaymentLink";
import { ConnectorInvocation as ConnectorInvocationModelImport } from "./src/models/ConnectorInvocation";
import { CustomerActive as CustomerActiveModelImport } from "./src/models/CustomerActive";
import { CustomerAddressActive as CustomerAddressActiveModelImport } from "./src/models/CustomerAddressActive";
import { CustomerAddressCreate as CustomerAddressCreateModelImport } from "./src/models/CustomerAddressCreate";
import { CustomerCommentActive as CustomerCommentActiveModelImport } from "./src/models/CustomerCommentActive";
import { CustomerCommentCreate as CustomerCommentCreateModelImport } from "./src/models/CustomerCommentCreate";
import { CustomerCreate as CustomerCreateModelImport } from "./src/models/CustomerCreate";
import { DeliveryIndication as DeliveryIndicationModelImport } from "./src/models/DeliveryIndication";
import { HumanUserCreate as HumanUserCreateModelImport } from "./src/models/HumanUserCreate";
import { HumanUserUpdate as HumanUserUpdateModelImport } from "./src/models/HumanUserUpdate";
import { InvoiceReconciliationRecord as InvoiceReconciliationRecordModelImport } from "./src/models/InvoiceReconciliationRecord";
import { InvoiceReimbursementWithRefundReference as InvoiceReimbursementWithRefundReferenceModelImport } from "./src/models/InvoiceReimbursementWithRefundReference";
import { PaymentLinkActive as PaymentLinkActiveModelImport } from "./src/models/PaymentLinkActive";
import { PaymentLinkCreate as PaymentLinkCreateModelImport } from "./src/models/PaymentLinkCreate";
import { RefundBankTransaction as RefundBankTransactionModelImport } from "./src/models/RefundBankTransaction";
import { RefundCommentActive as RefundCommentActiveModelImport } from "./src/models/RefundCommentActive";
import { RefundCommentCreate as RefundCommentCreateModelImport } from "./src/models/RefundCommentCreate";
import { RefundRecoveryBankTransaction as RefundRecoveryBankTransactionModelImport } from "./src/models/RefundRecoveryBankTransaction";
import { ShopifyRecurringOrder as ShopifyRecurringOrderModelImport } from "./src/models/ShopifyRecurringOrder";
import { ShopifySubscriptionAddress as ShopifySubscriptionAddressModelImport } from "./src/models/ShopifySubscriptionAddress";
import { ShopifySubscriptionProductCreate as ShopifySubscriptionProductCreateModelImport } from "./src/models/ShopifySubscriptionProductCreate";
import { ShopifySubscriptionProductUpdate as ShopifySubscriptionProductUpdateModelImport } from "./src/models/ShopifySubscriptionProductUpdate";
import { ShopifyTransaction as ShopifyTransactionModelImport } from "./src/models/ShopifyTransaction";
import { SpaceCreate as SpaceCreateModelImport } from "./src/models/SpaceCreate";
import { SpaceUpdate as SpaceUpdateModelImport } from "./src/models/SpaceUpdate";
import { TokenCreate as TokenCreateModelImport } from "./src/models/TokenCreate";
import { TokenUpdate as TokenUpdateModelImport } from "./src/models/TokenUpdate";
import { TransactionCommentActive as TransactionCommentActiveModelImport } from "./src/models/TransactionCommentActive";
import { TransactionCommentCreate as TransactionCommentCreateModelImport } from "./src/models/TransactionCommentCreate";
import { TransactionCompletion as TransactionCompletionModelImport } from "./src/models/TransactionCompletion";
import { TransactionCreate as TransactionCreateModelImport } from "./src/models/TransactionCreate";
import { TransactionInvoice as TransactionInvoiceModelImport } from "./src/models/TransactionInvoice";
import { TransactionInvoiceCommentActive as TransactionInvoiceCommentActiveModelImport } from "./src/models/TransactionInvoiceCommentActive";
import { TransactionInvoiceCommentCreate as TransactionInvoiceCommentCreateModelImport } from "./src/models/TransactionInvoiceCommentCreate";
import { TransactionLineItemVersion as TransactionLineItemVersionModelImport } from "./src/models/TransactionLineItemVersion";
import { TransactionPending as TransactionPendingModelImport } from "./src/models/TransactionPending";
import { TransactionVoid as TransactionVoidModelImport } from "./src/models/TransactionVoid";
import { WebhookListenerCreate as WebhookListenerCreateModelImport } from "./src/models/WebhookListenerCreate";
import { WebhookListenerUpdate as WebhookListenerUpdateModelImport } from "./src/models/WebhookListenerUpdate";
import { WebhookUrlCreate as WebhookUrlCreateModelImport } from "./src/models/WebhookUrlCreate";
import { WebhookUrlUpdate as WebhookUrlUpdateModelImport } from "./src/models/WebhookUrlUpdate";
import { ApplicationUserCreateWithMacKey as ApplicationUserCreateWithMacKeyModelImport } from "./src/models/ApplicationUserCreateWithMacKey";
import { AccountService as AccountServiceApiImport } from "./src/api/AccountService";
import { AnalyticsQueryService as AnalyticsQueryServiceApiImport } from "./src/api/AnalyticsQueryService";
import { ApplicationUserService as ApplicationUserServiceApiImport } from "./src/api/ApplicationUserService";
import { BankAccountService as BankAccountServiceApiImport } from "./src/api/BankAccountService";
import { BankTransactionService as BankTransactionServiceApiImport } from "./src/api/BankTransactionService";
import { ChargeAttemptService as ChargeAttemptServiceApiImport } from "./src/api/ChargeAttemptService";
import { ChargeBankTransactionService as ChargeBankTransactionServiceApiImport } from "./src/api/ChargeBankTransactionService";
import { ChargeFlowLevelPaymentLinkService as ChargeFlowLevelPaymentLinkServiceApiImport } from "./src/api/ChargeFlowLevelPaymentLinkService";
import { ChargeFlowLevelService as ChargeFlowLevelServiceApiImport } from "./src/api/ChargeFlowLevelService";
import { ChargeFlowService as ChargeFlowServiceApiImport } from "./src/api/ChargeFlowService";
import { ConditionTypeService as ConditionTypeServiceApiImport } from "./src/api/ConditionTypeService";
import { CountryService as CountryServiceApiImport } from "./src/api/CountryService";
import { CountryStateService as CountryStateServiceApiImport } from "./src/api/CountryStateService";
import { CurrencyBankAccountService as CurrencyBankAccountServiceApiImport } from "./src/api/CurrencyBankAccountService";
import { CurrencyService as CurrencyServiceApiImport } from "./src/api/CurrencyService";
import { CustomerAddressService as CustomerAddressServiceApiImport } from "./src/api/CustomerAddressService";
import { CustomerCommentService as CustomerCommentServiceApiImport } from "./src/api/CustomerCommentService";
import { CustomerService as CustomerServiceApiImport } from "./src/api/CustomerService";
import { DeliveryIndicationService as DeliveryIndicationServiceApiImport } from "./src/api/DeliveryIndicationService";
import { DocumentTemplateService as DocumentTemplateServiceApiImport } from "./src/api/DocumentTemplateService";
import { DocumentTemplateTypeService as DocumentTemplateTypeServiceApiImport } from "./src/api/DocumentTemplateTypeService";
import { ExternalTransferBankTransactionService as ExternalTransferBankTransactionServiceApiImport } from "./src/api/ExternalTransferBankTransactionService";
import { HumanUserService as HumanUserServiceApiImport } from "./src/api/HumanUserService";
import { InternalTransferBankTransactionService as InternalTransferBankTransactionServiceApiImport } from "./src/api/InternalTransferBankTransactionService";
import { InvoiceReconciliationRecordInvoiceLinkService as InvoiceReconciliationRecordInvoiceLinkServiceApiImport } from "./src/api/InvoiceReconciliationRecordInvoiceLinkService";
import { InvoiceReconciliationRecordService as InvoiceReconciliationRecordServiceApiImport } from "./src/api/InvoiceReconciliationRecordService";
import { InvoiceReimbursementService as InvoiceReimbursementServiceApiImport } from "./src/api/InvoiceReimbursementService";
import { LabelDescriptionGroupService as LabelDescriptionGroupServiceApiImport } from "./src/api/LabelDescriptionGroupService";
import { LabelDescriptionService as LabelDescriptionServiceApiImport } from "./src/api/LabelDescriptionService";
import { LanguageService as LanguageServiceApiImport } from "./src/api/LanguageService";
import { LegalOrganizationFormService as LegalOrganizationFormServiceApiImport } from "./src/api/LegalOrganizationFormService";
import { ManualTaskService as ManualTaskServiceApiImport } from "./src/api/ManualTaskService";
import { PaymentConnectorConfigurationService as PaymentConnectorConfigurationServiceApiImport } from "./src/api/PaymentConnectorConfigurationService";
import { PaymentConnectorService as PaymentConnectorServiceApiImport } from "./src/api/PaymentConnectorService";
import { PaymentLinkService as PaymentLinkServiceApiImport } from "./src/api/PaymentLinkService";
import { PaymentMethodBrandService as PaymentMethodBrandServiceApiImport } from "./src/api/PaymentMethodBrandService";
import { PaymentMethodConfigurationService as PaymentMethodConfigurationServiceApiImport } from "./src/api/PaymentMethodConfigurationService";
import { PaymentMethodService as PaymentMethodServiceApiImport } from "./src/api/PaymentMethodService";
import { PaymentProcessorConfigurationService as PaymentProcessorConfigurationServiceApiImport } from "./src/api/PaymentProcessorConfigurationService";
import { PaymentProcessorService as PaymentProcessorServiceApiImport } from "./src/api/PaymentProcessorService";
import { PaymentTerminalService as PaymentTerminalServiceApiImport } from "./src/api/PaymentTerminalService";
import { PaymentTerminalTillService as PaymentTerminalTillServiceApiImport } from "./src/api/PaymentTerminalTillService";
import { PaymentTerminalTransactionSummaryService as PaymentTerminalTransactionSummaryServiceApiImport } from "./src/api/PaymentTerminalTransactionSummaryService";
import { PermissionService as PermissionServiceApiImport } from "./src/api/PermissionService";
import { RefundBankTransactionService as RefundBankTransactionServiceApiImport } from "./src/api/RefundBankTransactionService";
import { RefundCommentService as RefundCommentServiceApiImport } from "./src/api/RefundCommentService";
import { RefundRecoveryBankTransactionService as RefundRecoveryBankTransactionServiceApiImport } from "./src/api/RefundRecoveryBankTransactionService";
import { RefundService as RefundServiceApiImport } from "./src/api/RefundService";
import { ShopifyRecurringOrderService as ShopifyRecurringOrderServiceApiImport } from "./src/api/ShopifyRecurringOrderService";
import { ShopifySubscriberService as ShopifySubscriberServiceApiImport } from "./src/api/ShopifySubscriberService";
import { ShopifySubscriptionProductService as ShopifySubscriptionProductServiceApiImport } from "./src/api/ShopifySubscriptionProductService";
import { ShopifySubscriptionService as ShopifySubscriptionServiceApiImport } from "./src/api/ShopifySubscriptionService";
import { ShopifySubscriptionSuspensionService as ShopifySubscriptionSuspensionServiceApiImport } from "./src/api/ShopifySubscriptionSuspensionService";
import { ShopifySubscriptionVersionService as ShopifySubscriptionVersionServiceApiImport } from "./src/api/ShopifySubscriptionVersionService";
import { ShopifyTransactionService as ShopifyTransactionServiceApiImport } from "./src/api/ShopifyTransactionService";
import { SpaceService as SpaceServiceApiImport } from "./src/api/SpaceService";
import { StaticValueService as StaticValueServiceApiImport } from "./src/api/StaticValueService";
import { TokenService as TokenServiceApiImport } from "./src/api/TokenService";
import { TokenVersionService as TokenVersionServiceApiImport } from "./src/api/TokenVersionService";
import { TransactionCommentService as TransactionCommentServiceApiImport } from "./src/api/TransactionCommentService";
import { TransactionCompletionService as TransactionCompletionServiceApiImport } from "./src/api/TransactionCompletionService";
import { TransactionIframeService as TransactionIframeServiceApiImport } from "./src/api/TransactionIframeService";
import { TransactionInvoiceCommentService as TransactionInvoiceCommentServiceApiImport } from "./src/api/TransactionInvoiceCommentService";
import { TransactionInvoiceService as TransactionInvoiceServiceApiImport } from "./src/api/TransactionInvoiceService";
import { TransactionLightboxService as TransactionLightboxServiceApiImport } from "./src/api/TransactionLightboxService";
import { TransactionLineItemVersionService as TransactionLineItemVersionServiceApiImport } from "./src/api/TransactionLineItemVersionService";
import { TransactionMobileSdkService as TransactionMobileSdkServiceApiImport } from "./src/api/TransactionMobileSdkService";
import { TransactionPaymentPageService as TransactionPaymentPageServiceApiImport } from "./src/api/TransactionPaymentPageService";
import { TransactionService as TransactionServiceApiImport } from "./src/api/TransactionService";
import { TransactionTerminalService as TransactionTerminalServiceApiImport } from "./src/api/TransactionTerminalService";
import { TransactionVoidService as TransactionVoidServiceApiImport } from "./src/api/TransactionVoidService";
import { UserAccountRoleService as UserAccountRoleServiceApiImport } from "./src/api/UserAccountRoleService";
import { UserSpaceRoleService as UserSpaceRoleServiceApiImport } from "./src/api/UserSpaceRoleService";
import { WebhookListenerService as WebhookListenerServiceApiImport } from "./src/api/WebhookListenerService";
import { WebhookUrlService as WebhookUrlServiceApiImport } from "./src/api/WebhookUrlService";
export declare namespace PostFinanceCheckout {
    namespace model {
        type AbstractAccountUpdate = AbstractAccountUpdateModelImport;
        const AbstractAccountUpdate: typeof AbstractAccountUpdateModelImport;
        type AbstractApplicationUserUpdate = AbstractApplicationUserUpdateModelImport;
        const AbstractApplicationUserUpdate: typeof AbstractApplicationUserUpdateModelImport;
        type AbstractCustomerActive = AbstractCustomerActiveModelImport;
        const AbstractCustomerActive: typeof AbstractCustomerActiveModelImport;
        type AbstractCustomerAddressActive = AbstractCustomerAddressActiveModelImport;
        const AbstractCustomerAddressActive: typeof AbstractCustomerAddressActiveModelImport;
        type AbstractCustomerCommentActive = AbstractCustomerCommentActiveModelImport;
        const AbstractCustomerCommentActive: typeof AbstractCustomerCommentActiveModelImport;
        type AbstractHumanUserUpdate = AbstractHumanUserUpdateModelImport;
        const AbstractHumanUserUpdate: typeof AbstractHumanUserUpdateModelImport;
        type AbstractPaymentLinkUpdate = AbstractPaymentLinkUpdateModelImport;
        const AbstractPaymentLinkUpdate: typeof AbstractPaymentLinkUpdateModelImport;
        type AbstractRefundCommentActive = AbstractRefundCommentActiveModelImport;
        const AbstractRefundCommentActive: typeof AbstractRefundCommentActiveModelImport;
        type AbstractShopifySubscriptionProductUpdate = AbstractShopifySubscriptionProductUpdateModelImport;
        const AbstractShopifySubscriptionProductUpdate: typeof AbstractShopifySubscriptionProductUpdateModelImport;
        type AbstractSpaceUpdate = AbstractSpaceUpdateModelImport;
        const AbstractSpaceUpdate: typeof AbstractSpaceUpdateModelImport;
        type AbstractTokenUpdate = AbstractTokenUpdateModelImport;
        const AbstractTokenUpdate: typeof AbstractTokenUpdateModelImport;
        type AbstractTransactionCommentActive = AbstractTransactionCommentActiveModelImport;
        const AbstractTransactionCommentActive: typeof AbstractTransactionCommentActiveModelImport;
        type AbstractTransactionInvoiceCommentActive = AbstractTransactionInvoiceCommentActiveModelImport;
        const AbstractTransactionInvoiceCommentActive: typeof AbstractTransactionInvoiceCommentActiveModelImport;
        type AbstractTransactionPending = AbstractTransactionPendingModelImport;
        const AbstractTransactionPending: typeof AbstractTransactionPendingModelImport;
        type AbstractWebhookListenerUpdate = AbstractWebhookListenerUpdateModelImport;
        const AbstractWebhookListenerUpdate: typeof AbstractWebhookListenerUpdateModelImport;
        type AbstractWebhookUrlUpdate = AbstractWebhookUrlUpdateModelImport;
        const AbstractWebhookUrlUpdate: typeof AbstractWebhookUrlUpdateModelImport;
        type Account = AccountModelImport;
        const Account: typeof AccountModelImport;
        type AccountState = AccountStateModelImport;
        const AccountState: typeof AccountStateModelImport;
        type AccountType = AccountTypeModelImport;
        const AccountType: typeof AccountTypeModelImport;
        type Address = AddressModelImport;
        const Address: typeof AddressModelImport;
        type AddressCreate = AddressCreateModelImport;
        const AddressCreate: typeof AddressCreateModelImport;
        type AnalyticsQuery = AnalyticsQueryModelImport;
        const AnalyticsQuery: typeof AnalyticsQueryModelImport;
        type AnalyticsQueryExecution = AnalyticsQueryExecutionModelImport;
        const AnalyticsQueryExecution: typeof AnalyticsQueryExecutionModelImport;
        type AnalyticsQueryExecutionState = AnalyticsQueryExecutionStateModelImport;
        const AnalyticsQueryExecutionState: typeof AnalyticsQueryExecutionStateModelImport;
        type AnalyticsQueryResultBatch = AnalyticsQueryResultBatchModelImport;
        const AnalyticsQueryResultBatch: typeof AnalyticsQueryResultBatchModelImport;
        type AnalyticsSchemaColumn = AnalyticsSchemaColumnModelImport;
        const AnalyticsSchemaColumn: typeof AnalyticsSchemaColumnModelImport;
        type AnalyticsSchemaTable = AnalyticsSchemaTableModelImport;
        const AnalyticsSchemaTable: typeof AnalyticsSchemaTableModelImport;
        type BankAccount = BankAccountModelImport;
        const BankAccount: typeof BankAccountModelImport;
        type BankAccountEnvironment = BankAccountEnvironmentModelImport;
        const BankAccountEnvironment: typeof BankAccountEnvironmentModelImport;
        type BankAccountState = BankAccountStateModelImport;
        const BankAccountState: typeof BankAccountStateModelImport;
        type BankAccountType = BankAccountTypeModelImport;
        const BankAccountType: typeof BankAccountTypeModelImport;
        type BankTransaction = BankTransactionModelImport;
        const BankTransaction: typeof BankTransactionModelImport;
        type BankTransactionFlowDirection = BankTransactionFlowDirectionModelImport;
        const BankTransactionFlowDirection: typeof BankTransactionFlowDirectionModelImport;
        type BankTransactionSource = BankTransactionSourceModelImport;
        const BankTransactionSource: typeof BankTransactionSourceModelImport;
        type BankTransactionState = BankTransactionStateModelImport;
        const BankTransactionState: typeof BankTransactionStateModelImport;
        type BankTransactionType = BankTransactionTypeModelImport;
        const BankTransactionType: typeof BankTransactionTypeModelImport;
        type ChargeAttemptEnvironment = ChargeAttemptEnvironmentModelImport;
        const ChargeAttemptEnvironment: typeof ChargeAttemptEnvironmentModelImport;
        type ChargeAttemptState = ChargeAttemptStateModelImport;
        const ChargeAttemptState: typeof ChargeAttemptStateModelImport;
        type ChargeFlow = ChargeFlowModelImport;
        const ChargeFlow: typeof ChargeFlowModelImport;
        type ChargeFlowLevelConfiguration = ChargeFlowLevelConfigurationModelImport;
        const ChargeFlowLevelConfiguration: typeof ChargeFlowLevelConfigurationModelImport;
        type ChargeFlowLevelConfigurationType = ChargeFlowLevelConfigurationTypeModelImport;
        const ChargeFlowLevelConfigurationType: typeof ChargeFlowLevelConfigurationTypeModelImport;
        type ChargeFlowLevelState = ChargeFlowLevelStateModelImport;
        const ChargeFlowLevelState: typeof ChargeFlowLevelStateModelImport;
        type ChargeState = ChargeStateModelImport;
        const ChargeState: typeof ChargeStateModelImport;
        type ChargeType = ChargeTypeModelImport;
        const ChargeType: typeof ChargeTypeModelImport;
        type ClientError = ClientErrorModelImport;
        const ClientError: typeof ClientErrorModelImport;
        type ClientErrorType = ClientErrorTypeModelImport;
        const ClientErrorType: typeof ClientErrorTypeModelImport;
        type CompletionLineItem = CompletionLineItemModelImport;
        const CompletionLineItem: typeof CompletionLineItemModelImport;
        type CompletionLineItemCreate = CompletionLineItemCreateModelImport;
        const CompletionLineItemCreate: typeof CompletionLineItemCreateModelImport;
        type Condition = ConditionModelImport;
        const Condition: typeof ConditionModelImport;
        type ConditionType = ConditionTypeModelImport;
        const ConditionType: typeof ConditionTypeModelImport;
        type ConnectorInvocationStage = ConnectorInvocationStageModelImport;
        const ConnectorInvocationStage: typeof ConnectorInvocationStageModelImport;
        type CreationEntityState = CreationEntityStateModelImport;
        const CreationEntityState: typeof CreationEntityStateModelImport;
        type CriteriaOperator = CriteriaOperatorModelImport;
        const CriteriaOperator: typeof CriteriaOperatorModelImport;
        type CurrencyBankAccount = CurrencyBankAccountModelImport;
        const CurrencyBankAccount: typeof CurrencyBankAccountModelImport;
        type Customer = CustomerModelImport;
        const Customer: typeof CustomerModelImport;
        type CustomerAddress = CustomerAddressModelImport;
        const CustomerAddress: typeof CustomerAddressModelImport;
        type CustomerAddressType = CustomerAddressTypeModelImport;
        const CustomerAddressType: typeof CustomerAddressTypeModelImport;
        type CustomerComment = CustomerCommentModelImport;
        const CustomerComment: typeof CustomerCommentModelImport;
        type CustomerPostalAddress = CustomerPostalAddressModelImport;
        const CustomerPostalAddress: typeof CustomerPostalAddressModelImport;
        type CustomerPostalAddressCreate = CustomerPostalAddressCreateModelImport;
        const CustomerPostalAddressCreate: typeof CustomerPostalAddressCreateModelImport;
        type CustomersPresence = CustomersPresenceModelImport;
        const CustomersPresence: typeof CustomersPresenceModelImport;
        type DataCollectionType = DataCollectionTypeModelImport;
        const DataCollectionType: typeof DataCollectionTypeModelImport;
        type DatabaseTranslatedString = DatabaseTranslatedStringModelImport;
        const DatabaseTranslatedString: typeof DatabaseTranslatedStringModelImport;
        type DatabaseTranslatedStringItem = DatabaseTranslatedStringItemModelImport;
        const DatabaseTranslatedStringItem: typeof DatabaseTranslatedStringItemModelImport;
        type DeliveryIndicationDecisionReason = DeliveryIndicationDecisionReasonModelImport;
        const DeliveryIndicationDecisionReason: typeof DeliveryIndicationDecisionReasonModelImport;
        type DeliveryIndicationState = DeliveryIndicationStateModelImport;
        const DeliveryIndicationState: typeof DeliveryIndicationStateModelImport;
        type DocumentTemplate = DocumentTemplateModelImport;
        const DocumentTemplate: typeof DocumentTemplateModelImport;
        type DocumentTemplateType = DocumentTemplateTypeModelImport;
        const DocumentTemplateType: typeof DocumentTemplateTypeModelImport;
        type DocumentTemplateTypeGroup = DocumentTemplateTypeGroupModelImport;
        const DocumentTemplateTypeGroup: typeof DocumentTemplateTypeGroupModelImport;
        type EntityExportRequest = EntityExportRequestModelImport;
        const EntityExportRequest: typeof EntityExportRequestModelImport;
        type EntityQuery = EntityQueryModelImport;
        const EntityQuery: typeof EntityQueryModelImport;
        type EntityQueryFilter = EntityQueryFilterModelImport;
        const EntityQueryFilter: typeof EntityQueryFilterModelImport;
        type EntityQueryFilterType = EntityQueryFilterTypeModelImport;
        const EntityQueryFilterType: typeof EntityQueryFilterTypeModelImport;
        type EntityQueryOrderBy = EntityQueryOrderByModelImport;
        const EntityQueryOrderBy: typeof EntityQueryOrderByModelImport;
        type EntityQueryOrderByType = EntityQueryOrderByTypeModelImport;
        const EntityQueryOrderByType: typeof EntityQueryOrderByTypeModelImport;
        type Environment = EnvironmentModelImport;
        const Environment: typeof EnvironmentModelImport;
        type ExternalTransferBankTransaction = ExternalTransferBankTransactionModelImport;
        const ExternalTransferBankTransaction: typeof ExternalTransferBankTransactionModelImport;
        type FailureCategory = FailureCategoryModelImport;
        const FailureCategory: typeof FailureCategoryModelImport;
        type FailureReason = FailureReasonModelImport;
        const FailureReason: typeof FailureReasonModelImport;
        type Feature = FeatureModelImport;
        const Feature: typeof FeatureModelImport;
        type FeatureCategory = FeatureCategoryModelImport;
        const FeatureCategory: typeof FeatureCategoryModelImport;
        type Gender = GenderModelImport;
        const Gender: typeof GenderModelImport;
        type HumanUser = HumanUserModelImport;
        const HumanUser: typeof HumanUserModelImport;
        type InternalTransferBankTransaction = InternalTransferBankTransactionModelImport;
        const InternalTransferBankTransaction: typeof InternalTransferBankTransactionModelImport;
        type InvoiceReconciliationRecordInvoiceLink = InvoiceReconciliationRecordInvoiceLinkModelImport;
        const InvoiceReconciliationRecordInvoiceLink: typeof InvoiceReconciliationRecordInvoiceLinkModelImport;
        type InvoiceReconciliationRecordRejectionStatus = InvoiceReconciliationRecordRejectionStatusModelImport;
        const InvoiceReconciliationRecordRejectionStatus: typeof InvoiceReconciliationRecordRejectionStatusModelImport;
        type InvoiceReconciliationRecordState = InvoiceReconciliationRecordStateModelImport;
        const InvoiceReconciliationRecordState: typeof InvoiceReconciliationRecordStateModelImport;
        type InvoiceReconciliationRecordType = InvoiceReconciliationRecordTypeModelImport;
        const InvoiceReconciliationRecordType: typeof InvoiceReconciliationRecordTypeModelImport;
        type InvoiceReimbursement = InvoiceReimbursementModelImport;
        const InvoiceReimbursement: typeof InvoiceReimbursementModelImport;
        type InvoiceReimbursementState = InvoiceReimbursementStateModelImport;
        const InvoiceReimbursementState: typeof InvoiceReimbursementStateModelImport;
        type Label = LabelModelImport;
        const Label: typeof LabelModelImport;
        type LabelDescriptor = LabelDescriptorModelImport;
        const LabelDescriptor: typeof LabelDescriptorModelImport;
        type LabelDescriptorCategory = LabelDescriptorCategoryModelImport;
        const LabelDescriptorCategory: typeof LabelDescriptorCategoryModelImport;
        type LabelDescriptorGroup = LabelDescriptorGroupModelImport;
        const LabelDescriptorGroup: typeof LabelDescriptorGroupModelImport;
        type LabelDescriptorType = LabelDescriptorTypeModelImport;
        const LabelDescriptorType: typeof LabelDescriptorTypeModelImport;
        type LegalOrganizationForm = LegalOrganizationFormModelImport;
        const LegalOrganizationForm: typeof LegalOrganizationFormModelImport;
        type LineItem = LineItemModelImport;
        const LineItem: typeof LineItemModelImport;
        type LineItemAttribute = LineItemAttributeModelImport;
        const LineItemAttribute: typeof LineItemAttributeModelImport;
        type LineItemAttributeCreate = LineItemAttributeCreateModelImport;
        const LineItemAttributeCreate: typeof LineItemAttributeCreateModelImport;
        type LineItemCreate = LineItemCreateModelImport;
        const LineItemCreate: typeof LineItemCreateModelImport;
        type LineItemReduction = LineItemReductionModelImport;
        const LineItemReduction: typeof LineItemReductionModelImport;
        type LineItemReductionCreate = LineItemReductionCreateModelImport;
        const LineItemReductionCreate: typeof LineItemReductionCreateModelImport;
        type LineItemType = LineItemTypeModelImport;
        const LineItemType: typeof LineItemTypeModelImport;
        type LocalizedString = LocalizedStringModelImport;
        const LocalizedString: typeof LocalizedStringModelImport;
        type ManualTask = ManualTaskModelImport;
        const ManualTask: typeof ManualTaskModelImport;
        type ManualTaskAction = ManualTaskActionModelImport;
        const ManualTaskAction: typeof ManualTaskActionModelImport;
        type ManualTaskActionStyle = ManualTaskActionStyleModelImport;
        const ManualTaskActionStyle: typeof ManualTaskActionStyleModelImport;
        type ManualTaskState = ManualTaskStateModelImport;
        const ManualTaskState: typeof ManualTaskStateModelImport;
        type ManualTaskType = ManualTaskTypeModelImport;
        const ManualTaskType: typeof ManualTaskTypeModelImport;
        type OneClickPaymentMode = OneClickPaymentModeModelImport;
        const OneClickPaymentMode: typeof OneClickPaymentModeModelImport;
        type PaymentAdjustment = PaymentAdjustmentModelImport;
        const PaymentAdjustment: typeof PaymentAdjustmentModelImport;
        type PaymentAdjustmentType = PaymentAdjustmentTypeModelImport;
        const PaymentAdjustmentType: typeof PaymentAdjustmentTypeModelImport;
        type PaymentConnector = PaymentConnectorModelImport;
        const PaymentConnector: typeof PaymentConnectorModelImport;
        type PaymentConnectorConfiguration = PaymentConnectorConfigurationModelImport;
        const PaymentConnectorConfiguration: typeof PaymentConnectorConfigurationModelImport;
        type PaymentConnectorFeature = PaymentConnectorFeatureModelImport;
        const PaymentConnectorFeature: typeof PaymentConnectorFeatureModelImport;
        type PaymentContract = PaymentContractModelImport;
        const PaymentContract: typeof PaymentContractModelImport;
        type PaymentContractState = PaymentContractStateModelImport;
        const PaymentContractState: typeof PaymentContractStateModelImport;
        type PaymentContractType = PaymentContractTypeModelImport;
        const PaymentContractType: typeof PaymentContractTypeModelImport;
        type PaymentInformationHash = PaymentInformationHashModelImport;
        const PaymentInformationHash: typeof PaymentInformationHashModelImport;
        type PaymentInformationHashType = PaymentInformationHashTypeModelImport;
        const PaymentInformationHashType: typeof PaymentInformationHashTypeModelImport;
        type PaymentInitiationAdviceFile = PaymentInitiationAdviceFileModelImport;
        const PaymentInitiationAdviceFile: typeof PaymentInitiationAdviceFileModelImport;
        type PaymentInitiationAdviceFileState = PaymentInitiationAdviceFileStateModelImport;
        const PaymentInitiationAdviceFileState: typeof PaymentInitiationAdviceFileStateModelImport;
        type PaymentLink = PaymentLinkModelImport;
        const PaymentLink: typeof PaymentLinkModelImport;
        type PaymentLinkAddressHandlingMode = PaymentLinkAddressHandlingModeModelImport;
        const PaymentLinkAddressHandlingMode: typeof PaymentLinkAddressHandlingModeModelImport;
        type PaymentLinkProtectionMode = PaymentLinkProtectionModeModelImport;
        const PaymentLinkProtectionMode: typeof PaymentLinkProtectionModeModelImport;
        type PaymentLinkUpdate = PaymentLinkUpdateModelImport;
        const PaymentLinkUpdate: typeof PaymentLinkUpdateModelImport;
        type PaymentMethod = PaymentMethodModelImport;
        const PaymentMethod: typeof PaymentMethodModelImport;
        type PaymentMethodBrand = PaymentMethodBrandModelImport;
        const PaymentMethodBrand: typeof PaymentMethodBrandModelImport;
        type PaymentMethodConfiguration = PaymentMethodConfigurationModelImport;
        const PaymentMethodConfiguration: typeof PaymentMethodConfigurationModelImport;
        type PaymentPrimaryRiskTaker = PaymentPrimaryRiskTakerModelImport;
        const PaymentPrimaryRiskTaker: typeof PaymentPrimaryRiskTakerModelImport;
        type PaymentProcessor = PaymentProcessorModelImport;
        const PaymentProcessor: typeof PaymentProcessorModelImport;
        type PaymentProcessorConfiguration = PaymentProcessorConfigurationModelImport;
        const PaymentProcessorConfiguration: typeof PaymentProcessorConfigurationModelImport;
        type PaymentTerminal = PaymentTerminalModelImport;
        const PaymentTerminal: typeof PaymentTerminalModelImport;
        type PaymentTerminalAddress = PaymentTerminalAddressModelImport;
        const PaymentTerminalAddress: typeof PaymentTerminalAddressModelImport;
        type PaymentTerminalConfiguration = PaymentTerminalConfigurationModelImport;
        const PaymentTerminalConfiguration: typeof PaymentTerminalConfigurationModelImport;
        type PaymentTerminalConfigurationState = PaymentTerminalConfigurationStateModelImport;
        const PaymentTerminalConfigurationState: typeof PaymentTerminalConfigurationStateModelImport;
        type PaymentTerminalConfigurationVersion = PaymentTerminalConfigurationVersionModelImport;
        const PaymentTerminalConfigurationVersion: typeof PaymentTerminalConfigurationVersionModelImport;
        type PaymentTerminalConfigurationVersionState = PaymentTerminalConfigurationVersionStateModelImport;
        const PaymentTerminalConfigurationVersionState: typeof PaymentTerminalConfigurationVersionStateModelImport;
        type PaymentTerminalDccTransactionSum = PaymentTerminalDccTransactionSumModelImport;
        const PaymentTerminalDccTransactionSum: typeof PaymentTerminalDccTransactionSumModelImport;
        type PaymentTerminalLocation = PaymentTerminalLocationModelImport;
        const PaymentTerminalLocation: typeof PaymentTerminalLocationModelImport;
        type PaymentTerminalLocationState = PaymentTerminalLocationStateModelImport;
        const PaymentTerminalLocationState: typeof PaymentTerminalLocationStateModelImport;
        type PaymentTerminalLocationVersion = PaymentTerminalLocationVersionModelImport;
        const PaymentTerminalLocationVersion: typeof PaymentTerminalLocationVersionModelImport;
        type PaymentTerminalLocationVersionState = PaymentTerminalLocationVersionStateModelImport;
        const PaymentTerminalLocationVersionState: typeof PaymentTerminalLocationVersionStateModelImport;
        type PaymentTerminalReceiptType = PaymentTerminalReceiptTypeModelImport;
        const PaymentTerminalReceiptType: typeof PaymentTerminalReceiptTypeModelImport;
        type PaymentTerminalState = PaymentTerminalStateModelImport;
        const PaymentTerminalState: typeof PaymentTerminalStateModelImport;
        type PaymentTerminalTransactionSum = PaymentTerminalTransactionSumModelImport;
        const PaymentTerminalTransactionSum: typeof PaymentTerminalTransactionSumModelImport;
        type PaymentTerminalTransactionSummary = PaymentTerminalTransactionSummaryModelImport;
        const PaymentTerminalTransactionSummary: typeof PaymentTerminalTransactionSummaryModelImport;
        type PaymentTerminalTransactionSummaryFetchRequest = PaymentTerminalTransactionSummaryFetchRequestModelImport;
        const PaymentTerminalTransactionSummaryFetchRequest: typeof PaymentTerminalTransactionSummaryFetchRequestModelImport;
        type PaymentTerminalType = PaymentTerminalTypeModelImport;
        const PaymentTerminalType: typeof PaymentTerminalTypeModelImport;
        type Permission = PermissionModelImport;
        const Permission: typeof PermissionModelImport;
        type Refund = RefundModelImport;
        const Refund: typeof RefundModelImport;
        type RefundComment = RefundCommentModelImport;
        const RefundComment: typeof RefundCommentModelImport;
        type RefundCreate = RefundCreateModelImport;
        const RefundCreate: typeof RefundCreateModelImport;
        type RefundState = RefundStateModelImport;
        const RefundState: typeof RefundStateModelImport;
        type RefundType = RefundTypeModelImport;
        const RefundType: typeof RefundTypeModelImport;
        type RenderedDocument = RenderedDocumentModelImport;
        const RenderedDocument: typeof RenderedDocumentModelImport;
        type RenderedTerminalReceipt = RenderedTerminalReceiptModelImport;
        const RenderedTerminalReceipt: typeof RenderedTerminalReceiptModelImport;
        type RenderedTerminalTransactionSummary = RenderedTerminalTransactionSummaryModelImport;
        const RenderedTerminalTransactionSummary: typeof RenderedTerminalTransactionSummaryModelImport;
        type ResourcePath = ResourcePathModelImport;
        const ResourcePath: typeof ResourcePathModelImport;
        type ResourceState = ResourceStateModelImport;
        const ResourceState: typeof ResourceStateModelImport;
        type RestAddressFormat = RestAddressFormatModelImport;
        const RestAddressFormat: typeof RestAddressFormatModelImport;
        type RestAddressFormatField = RestAddressFormatFieldModelImport;
        const RestAddressFormatField: typeof RestAddressFormatFieldModelImport;
        type RestCountry = RestCountryModelImport;
        const RestCountry: typeof RestCountryModelImport;
        type RestCountryState = RestCountryStateModelImport;
        const RestCountryState: typeof RestCountryStateModelImport;
        type RestCurrency = RestCurrencyModelImport;
        const RestCurrency: typeof RestCurrencyModelImport;
        type RestLanguage = RestLanguageModelImport;
        const RestLanguage: typeof RestLanguageModelImport;
        type Role = RoleModelImport;
        const Role: typeof RoleModelImport;
        type RoleState = RoleStateModelImport;
        const RoleState: typeof RoleStateModelImport;
        type SalesChannel = SalesChannelModelImport;
        const SalesChannel: typeof SalesChannelModelImport;
        type Scope = ScopeModelImport;
        const Scope: typeof ScopeModelImport;
        type ServerError = ServerErrorModelImport;
        const ServerError: typeof ServerErrorModelImport;
        type ShopifyAdditionalLineItemData = ShopifyAdditionalLineItemDataModelImport;
        const ShopifyAdditionalLineItemData: typeof ShopifyAdditionalLineItemDataModelImport;
        type ShopifyIntegration = ShopifyIntegrationModelImport;
        const ShopifyIntegration: typeof ShopifyIntegrationModelImport;
        type ShopifyIntegrationPaymentAppVersion = ShopifyIntegrationPaymentAppVersionModelImport;
        const ShopifyIntegrationPaymentAppVersion: typeof ShopifyIntegrationPaymentAppVersionModelImport;
        type ShopifyIntegrationSubscriptionAppVersion = ShopifyIntegrationSubscriptionAppVersionModelImport;
        const ShopifyIntegrationSubscriptionAppVersion: typeof ShopifyIntegrationSubscriptionAppVersionModelImport;
        type ShopifyRecurringOrderState = ShopifyRecurringOrderStateModelImport;
        const ShopifyRecurringOrderState: typeof ShopifyRecurringOrderStateModelImport;
        type ShopifyRecurringOrderUpdateRequest = ShopifyRecurringOrderUpdateRequestModelImport;
        const ShopifyRecurringOrderUpdateRequest: typeof ShopifyRecurringOrderUpdateRequestModelImport;
        type ShopifySubscriber = ShopifySubscriberModelImport;
        const ShopifySubscriber: typeof ShopifySubscriberModelImport;
        type ShopifySubscriberActive = ShopifySubscriberActiveModelImport;
        const ShopifySubscriberActive: typeof ShopifySubscriberActiveModelImport;
        type ShopifySubscriberCreation = ShopifySubscriberCreationModelImport;
        const ShopifySubscriberCreation: typeof ShopifySubscriberCreationModelImport;
        type ShopifySubscriberState = ShopifySubscriberStateModelImport;
        const ShopifySubscriberState: typeof ShopifySubscriberStateModelImport;
        type ShopifySubscription = ShopifySubscriptionModelImport;
        const ShopifySubscription: typeof ShopifySubscriptionModelImport;
        type ShopifySubscriptionAddressCreate = ShopifySubscriptionAddressCreateModelImport;
        const ShopifySubscriptionAddressCreate: typeof ShopifySubscriptionAddressCreateModelImport;
        type ShopifySubscriptionBillingIntervalUnit = ShopifySubscriptionBillingIntervalUnitModelImport;
        const ShopifySubscriptionBillingIntervalUnit: typeof ShopifySubscriptionBillingIntervalUnitModelImport;
        type ShopifySubscriptionCreationRequest = ShopifySubscriptionCreationRequestModelImport;
        const ShopifySubscriptionCreationRequest: typeof ShopifySubscriptionCreationRequestModelImport;
        type ShopifySubscriptionModelBillingConfiguration = ShopifySubscriptionModelBillingConfigurationModelImport;
        const ShopifySubscriptionModelBillingConfiguration: typeof ShopifySubscriptionModelBillingConfigurationModelImport;
        type ShopifySubscriptionModelItem = ShopifySubscriptionModelItemModelImport;
        const ShopifySubscriptionModelItem: typeof ShopifySubscriptionModelItemModelImport;
        type ShopifySubscriptionModelTaxLine = ShopifySubscriptionModelTaxLineModelImport;
        const ShopifySubscriptionModelTaxLine: typeof ShopifySubscriptionModelTaxLineModelImport;
        type ShopifySubscriptionProduct = ShopifySubscriptionProductModelImport;
        const ShopifySubscriptionProduct: typeof ShopifySubscriptionProductModelImport;
        type ShopifySubscriptionProductPricingOption = ShopifySubscriptionProductPricingOptionModelImport;
        const ShopifySubscriptionProductPricingOption: typeof ShopifySubscriptionProductPricingOptionModelImport;
        type ShopifySubscriptionProductState = ShopifySubscriptionProductStateModelImport;
        const ShopifySubscriptionProductState: typeof ShopifySubscriptionProductStateModelImport;
        type ShopifySubscriptionState = ShopifySubscriptionStateModelImport;
        const ShopifySubscriptionState: typeof ShopifySubscriptionStateModelImport;
        type ShopifySubscriptionSuspension = ShopifySubscriptionSuspensionModelImport;
        const ShopifySubscriptionSuspension: typeof ShopifySubscriptionSuspensionModelImport;
        type ShopifySubscriptionSuspensionCreate = ShopifySubscriptionSuspensionCreateModelImport;
        const ShopifySubscriptionSuspensionCreate: typeof ShopifySubscriptionSuspensionCreateModelImport;
        type ShopifySubscriptionSuspensionInitiator = ShopifySubscriptionSuspensionInitiatorModelImport;
        const ShopifySubscriptionSuspensionInitiator: typeof ShopifySubscriptionSuspensionInitiatorModelImport;
        type ShopifySubscriptionSuspensionState = ShopifySubscriptionSuspensionStateModelImport;
        const ShopifySubscriptionSuspensionState: typeof ShopifySubscriptionSuspensionStateModelImport;
        type ShopifySubscriptionSuspensionType = ShopifySubscriptionSuspensionTypeModelImport;
        const ShopifySubscriptionSuspensionType: typeof ShopifySubscriptionSuspensionTypeModelImport;
        type ShopifySubscriptionUpdateAddressesRequest = ShopifySubscriptionUpdateAddressesRequestModelImport;
        const ShopifySubscriptionUpdateAddressesRequest: typeof ShopifySubscriptionUpdateAddressesRequestModelImport;
        type ShopifySubscriptionUpdateRequest = ShopifySubscriptionUpdateRequestModelImport;
        const ShopifySubscriptionUpdateRequest: typeof ShopifySubscriptionUpdateRequestModelImport;
        type ShopifySubscriptionVersion = ShopifySubscriptionVersionModelImport;
        const ShopifySubscriptionVersion: typeof ShopifySubscriptionVersionModelImport;
        type ShopifySubscriptionVersionItem = ShopifySubscriptionVersionItemModelImport;
        const ShopifySubscriptionVersionItem: typeof ShopifySubscriptionVersionItemModelImport;
        type ShopifySubscriptionVersionItemPriceStrategy = ShopifySubscriptionVersionItemPriceStrategyModelImport;
        const ShopifySubscriptionVersionItemPriceStrategy: typeof ShopifySubscriptionVersionItemPriceStrategyModelImport;
        type ShopifySubscriptionVersionState = ShopifySubscriptionVersionStateModelImport;
        const ShopifySubscriptionVersionState: typeof ShopifySubscriptionVersionStateModelImport;
        type ShopifySubscriptionWeekday = ShopifySubscriptionWeekdayModelImport;
        const ShopifySubscriptionWeekday: typeof ShopifySubscriptionWeekdayModelImport;
        type ShopifyTaxLine = ShopifyTaxLineModelImport;
        const ShopifyTaxLine: typeof ShopifyTaxLineModelImport;
        type ShopifyTransactionState = ShopifyTransactionStateModelImport;
        const ShopifyTransactionState: typeof ShopifyTransactionStateModelImport;
        type Space = SpaceModelImport;
        const Space: typeof SpaceModelImport;
        type SpaceAddress = SpaceAddressModelImport;
        const SpaceAddress: typeof SpaceAddressModelImport;
        type SpaceAddressCreate = SpaceAddressCreateModelImport;
        const SpaceAddressCreate: typeof SpaceAddressCreateModelImport;
        type SpaceView = SpaceViewModelImport;
        const SpaceView: typeof SpaceViewModelImport;
        type StaticValue = StaticValueModelImport;
        const StaticValue: typeof StaticValueModelImport;
        type Tax = TaxModelImport;
        const Tax: typeof TaxModelImport;
        type TaxCreate = TaxCreateModelImport;
        const TaxCreate: typeof TaxCreateModelImport;
        type TenantDatabase = TenantDatabaseModelImport;
        const TenantDatabase: typeof TenantDatabaseModelImport;
        type TerminalReceiptFetchRequest = TerminalReceiptFetchRequestModelImport;
        const TerminalReceiptFetchRequest: typeof TerminalReceiptFetchRequestModelImport;
        type TerminalReceiptFormat = TerminalReceiptFormatModelImport;
        const TerminalReceiptFormat: typeof TerminalReceiptFormatModelImport;
        type Token = TokenModelImport;
        const Token: typeof TokenModelImport;
        type TokenVersion = TokenVersionModelImport;
        const TokenVersion: typeof TokenVersionModelImport;
        type TokenVersionState = TokenVersionStateModelImport;
        const TokenVersionState: typeof TokenVersionStateModelImport;
        type TokenVersionType = TokenVersionTypeModelImport;
        const TokenVersionType: typeof TokenVersionTypeModelImport;
        type TokenizationMode = TokenizationModeModelImport;
        const TokenizationMode: typeof TokenizationModeModelImport;
        type Transaction = TransactionModelImport;
        const Transaction: typeof TransactionModelImport;
        type TransactionAwareEntity = TransactionAwareEntityModelImport;
        const TransactionAwareEntity: typeof TransactionAwareEntityModelImport;
        type TransactionComment = TransactionCommentModelImport;
        const TransactionComment: typeof TransactionCommentModelImport;
        type TransactionCompletionBehavior = TransactionCompletionBehaviorModelImport;
        const TransactionCompletionBehavior: typeof TransactionCompletionBehaviorModelImport;
        type TransactionCompletionMode = TransactionCompletionModeModelImport;
        const TransactionCompletionMode: typeof TransactionCompletionModeModelImport;
        type TransactionCompletionRequest = TransactionCompletionRequestModelImport;
        const TransactionCompletionRequest: typeof TransactionCompletionRequestModelImport;
        type TransactionCompletionState = TransactionCompletionStateModelImport;
        const TransactionCompletionState: typeof TransactionCompletionStateModelImport;
        type TransactionEnvironmentSelectionStrategy = TransactionEnvironmentSelectionStrategyModelImport;
        const TransactionEnvironmentSelectionStrategy: typeof TransactionEnvironmentSelectionStrategyModelImport;
        type TransactionGroup = TransactionGroupModelImport;
        const TransactionGroup: typeof TransactionGroupModelImport;
        type TransactionGroupState = TransactionGroupStateModelImport;
        const TransactionGroupState: typeof TransactionGroupStateModelImport;
        type TransactionInvoiceComment = TransactionInvoiceCommentModelImport;
        const TransactionInvoiceComment: typeof TransactionInvoiceCommentModelImport;
        type TransactionInvoiceReplacement = TransactionInvoiceReplacementModelImport;
        const TransactionInvoiceReplacement: typeof TransactionInvoiceReplacementModelImport;
        type TransactionInvoiceState = TransactionInvoiceStateModelImport;
        const TransactionInvoiceState: typeof TransactionInvoiceStateModelImport;
        type TransactionLineItemVersionCreate = TransactionLineItemVersionCreateModelImport;
        const TransactionLineItemVersionCreate: typeof TransactionLineItemVersionCreateModelImport;
        type TransactionLineItemVersionState = TransactionLineItemVersionStateModelImport;
        const TransactionLineItemVersionState: typeof TransactionLineItemVersionStateModelImport;
        type TransactionState = TransactionStateModelImport;
        const TransactionState: typeof TransactionStateModelImport;
        type TransactionUserInterfaceType = TransactionUserInterfaceTypeModelImport;
        const TransactionUserInterfaceType: typeof TransactionUserInterfaceTypeModelImport;
        type TransactionVoidMode = TransactionVoidModeModelImport;
        const TransactionVoidMode: typeof TransactionVoidModeModelImport;
        type TransactionVoidState = TransactionVoidStateModelImport;
        const TransactionVoidState: typeof TransactionVoidStateModelImport;
        type TwoFactorAuthenticationType = TwoFactorAuthenticationTypeModelImport;
        const TwoFactorAuthenticationType: typeof TwoFactorAuthenticationTypeModelImport;
        type User = UserModelImport;
        const User: typeof UserModelImport;
        type UserAccountRole = UserAccountRoleModelImport;
        const UserAccountRole: typeof UserAccountRoleModelImport;
        type UserSpaceRole = UserSpaceRoleModelImport;
        const UserSpaceRole: typeof UserSpaceRoleModelImport;
        type UserType = UserTypeModelImport;
        const UserType: typeof UserTypeModelImport;
        type WalletType = WalletTypeModelImport;
        const WalletType: typeof WalletTypeModelImport;
        type WebhookIdentity = WebhookIdentityModelImport;
        const WebhookIdentity: typeof WebhookIdentityModelImport;
        type WebhookListener = WebhookListenerModelImport;
        const WebhookListener: typeof WebhookListenerModelImport;
        type WebhookListenerEntity = WebhookListenerEntityModelImport;
        const WebhookListenerEntity: typeof WebhookListenerEntityModelImport;
        type WebhookUrl = WebhookUrlModelImport;
        const WebhookUrl: typeof WebhookUrlModelImport;
        type AccountCreate = AccountCreateModelImport;
        const AccountCreate: typeof AccountCreateModelImport;
        type AccountUpdate = AccountUpdateModelImport;
        const AccountUpdate: typeof AccountUpdateModelImport;
        type ApplicationUser = ApplicationUserModelImport;
        const ApplicationUser: typeof ApplicationUserModelImport;
        type ApplicationUserCreate = ApplicationUserCreateModelImport;
        const ApplicationUserCreate: typeof ApplicationUserCreateModelImport;
        type ApplicationUserUpdate = ApplicationUserUpdateModelImport;
        const ApplicationUserUpdate: typeof ApplicationUserUpdateModelImport;
        type Charge = ChargeModelImport;
        const Charge: typeof ChargeModelImport;
        type ChargeAttempt = ChargeAttemptModelImport;
        const ChargeAttempt: typeof ChargeAttemptModelImport;
        type ChargeBankTransaction = ChargeBankTransactionModelImport;
        const ChargeBankTransaction: typeof ChargeBankTransactionModelImport;
        type ChargeFlowLevel = ChargeFlowLevelModelImport;
        const ChargeFlowLevel: typeof ChargeFlowLevelModelImport;
        type ChargeFlowLevelPaymentLink = ChargeFlowLevelPaymentLinkModelImport;
        const ChargeFlowLevelPaymentLink: typeof ChargeFlowLevelPaymentLinkModelImport;
        type ConnectorInvocation = ConnectorInvocationModelImport;
        const ConnectorInvocation: typeof ConnectorInvocationModelImport;
        type CustomerActive = CustomerActiveModelImport;
        const CustomerActive: typeof CustomerActiveModelImport;
        type CustomerAddressActive = CustomerAddressActiveModelImport;
        const CustomerAddressActive: typeof CustomerAddressActiveModelImport;
        type CustomerAddressCreate = CustomerAddressCreateModelImport;
        const CustomerAddressCreate: typeof CustomerAddressCreateModelImport;
        type CustomerCommentActive = CustomerCommentActiveModelImport;
        const CustomerCommentActive: typeof CustomerCommentActiveModelImport;
        type CustomerCommentCreate = CustomerCommentCreateModelImport;
        const CustomerCommentCreate: typeof CustomerCommentCreateModelImport;
        type CustomerCreate = CustomerCreateModelImport;
        const CustomerCreate: typeof CustomerCreateModelImport;
        type DeliveryIndication = DeliveryIndicationModelImport;
        const DeliveryIndication: typeof DeliveryIndicationModelImport;
        type HumanUserCreate = HumanUserCreateModelImport;
        const HumanUserCreate: typeof HumanUserCreateModelImport;
        type HumanUserUpdate = HumanUserUpdateModelImport;
        const HumanUserUpdate: typeof HumanUserUpdateModelImport;
        type InvoiceReconciliationRecord = InvoiceReconciliationRecordModelImport;
        const InvoiceReconciliationRecord: typeof InvoiceReconciliationRecordModelImport;
        type InvoiceReimbursementWithRefundReference = InvoiceReimbursementWithRefundReferenceModelImport;
        const InvoiceReimbursementWithRefundReference: typeof InvoiceReimbursementWithRefundReferenceModelImport;
        type PaymentLinkActive = PaymentLinkActiveModelImport;
        const PaymentLinkActive: typeof PaymentLinkActiveModelImport;
        type PaymentLinkCreate = PaymentLinkCreateModelImport;
        const PaymentLinkCreate: typeof PaymentLinkCreateModelImport;
        type RefundBankTransaction = RefundBankTransactionModelImport;
        const RefundBankTransaction: typeof RefundBankTransactionModelImport;
        type RefundCommentActive = RefundCommentActiveModelImport;
        const RefundCommentActive: typeof RefundCommentActiveModelImport;
        type RefundCommentCreate = RefundCommentCreateModelImport;
        const RefundCommentCreate: typeof RefundCommentCreateModelImport;
        type RefundRecoveryBankTransaction = RefundRecoveryBankTransactionModelImport;
        const RefundRecoveryBankTransaction: typeof RefundRecoveryBankTransactionModelImport;
        type ShopifyRecurringOrder = ShopifyRecurringOrderModelImport;
        const ShopifyRecurringOrder: typeof ShopifyRecurringOrderModelImport;
        type ShopifySubscriptionAddress = ShopifySubscriptionAddressModelImport;
        const ShopifySubscriptionAddress: typeof ShopifySubscriptionAddressModelImport;
        type ShopifySubscriptionProductCreate = ShopifySubscriptionProductCreateModelImport;
        const ShopifySubscriptionProductCreate: typeof ShopifySubscriptionProductCreateModelImport;
        type ShopifySubscriptionProductUpdate = ShopifySubscriptionProductUpdateModelImport;
        const ShopifySubscriptionProductUpdate: typeof ShopifySubscriptionProductUpdateModelImport;
        type ShopifyTransaction = ShopifyTransactionModelImport;
        const ShopifyTransaction: typeof ShopifyTransactionModelImport;
        type SpaceCreate = SpaceCreateModelImport;
        const SpaceCreate: typeof SpaceCreateModelImport;
        type SpaceUpdate = SpaceUpdateModelImport;
        const SpaceUpdate: typeof SpaceUpdateModelImport;
        type TokenCreate = TokenCreateModelImport;
        const TokenCreate: typeof TokenCreateModelImport;
        type TokenUpdate = TokenUpdateModelImport;
        const TokenUpdate: typeof TokenUpdateModelImport;
        type TransactionCommentActive = TransactionCommentActiveModelImport;
        const TransactionCommentActive: typeof TransactionCommentActiveModelImport;
        type TransactionCommentCreate = TransactionCommentCreateModelImport;
        const TransactionCommentCreate: typeof TransactionCommentCreateModelImport;
        type TransactionCompletion = TransactionCompletionModelImport;
        const TransactionCompletion: typeof TransactionCompletionModelImport;
        type TransactionCreate = TransactionCreateModelImport;
        const TransactionCreate: typeof TransactionCreateModelImport;
        type TransactionInvoice = TransactionInvoiceModelImport;
        const TransactionInvoice: typeof TransactionInvoiceModelImport;
        type TransactionInvoiceCommentActive = TransactionInvoiceCommentActiveModelImport;
        const TransactionInvoiceCommentActive: typeof TransactionInvoiceCommentActiveModelImport;
        type TransactionInvoiceCommentCreate = TransactionInvoiceCommentCreateModelImport;
        const TransactionInvoiceCommentCreate: typeof TransactionInvoiceCommentCreateModelImport;
        type TransactionLineItemVersion = TransactionLineItemVersionModelImport;
        const TransactionLineItemVersion: typeof TransactionLineItemVersionModelImport;
        type TransactionPending = TransactionPendingModelImport;
        const TransactionPending: typeof TransactionPendingModelImport;
        type TransactionVoid = TransactionVoidModelImport;
        const TransactionVoid: typeof TransactionVoidModelImport;
        type WebhookListenerCreate = WebhookListenerCreateModelImport;
        const WebhookListenerCreate: typeof WebhookListenerCreateModelImport;
        type WebhookListenerUpdate = WebhookListenerUpdateModelImport;
        const WebhookListenerUpdate: typeof WebhookListenerUpdateModelImport;
        type WebhookUrlCreate = WebhookUrlCreateModelImport;
        const WebhookUrlCreate: typeof WebhookUrlCreateModelImport;
        type WebhookUrlUpdate = WebhookUrlUpdateModelImport;
        const WebhookUrlUpdate: typeof WebhookUrlUpdateModelImport;
        type ApplicationUserCreateWithMacKey = ApplicationUserCreateWithMacKeyModelImport;
        const ApplicationUserCreateWithMacKey: typeof ApplicationUserCreateWithMacKeyModelImport;
    }
    namespace api {
        type AccountService = AccountServiceApiImport;
        const AccountService: typeof AccountServiceApiImport;
        type AnalyticsQueryService = AnalyticsQueryServiceApiImport;
        const AnalyticsQueryService: typeof AnalyticsQueryServiceApiImport;
        type ApplicationUserService = ApplicationUserServiceApiImport;
        const ApplicationUserService: typeof ApplicationUserServiceApiImport;
        type BankAccountService = BankAccountServiceApiImport;
        const BankAccountService: typeof BankAccountServiceApiImport;
        type BankTransactionService = BankTransactionServiceApiImport;
        const BankTransactionService: typeof BankTransactionServiceApiImport;
        type ChargeAttemptService = ChargeAttemptServiceApiImport;
        const ChargeAttemptService: typeof ChargeAttemptServiceApiImport;
        type ChargeBankTransactionService = ChargeBankTransactionServiceApiImport;
        const ChargeBankTransactionService: typeof ChargeBankTransactionServiceApiImport;
        type ChargeFlowLevelPaymentLinkService = ChargeFlowLevelPaymentLinkServiceApiImport;
        const ChargeFlowLevelPaymentLinkService: typeof ChargeFlowLevelPaymentLinkServiceApiImport;
        type ChargeFlowLevelService = ChargeFlowLevelServiceApiImport;
        const ChargeFlowLevelService: typeof ChargeFlowLevelServiceApiImport;
        type ChargeFlowService = ChargeFlowServiceApiImport;
        const ChargeFlowService: typeof ChargeFlowServiceApiImport;
        type ConditionTypeService = ConditionTypeServiceApiImport;
        const ConditionTypeService: typeof ConditionTypeServiceApiImport;
        type CountryService = CountryServiceApiImport;
        const CountryService: typeof CountryServiceApiImport;
        type CountryStateService = CountryStateServiceApiImport;
        const CountryStateService: typeof CountryStateServiceApiImport;
        type CurrencyBankAccountService = CurrencyBankAccountServiceApiImport;
        const CurrencyBankAccountService: typeof CurrencyBankAccountServiceApiImport;
        type CurrencyService = CurrencyServiceApiImport;
        const CurrencyService: typeof CurrencyServiceApiImport;
        type CustomerAddressService = CustomerAddressServiceApiImport;
        const CustomerAddressService: typeof CustomerAddressServiceApiImport;
        type CustomerCommentService = CustomerCommentServiceApiImport;
        const CustomerCommentService: typeof CustomerCommentServiceApiImport;
        type CustomerService = CustomerServiceApiImport;
        const CustomerService: typeof CustomerServiceApiImport;
        type DeliveryIndicationService = DeliveryIndicationServiceApiImport;
        const DeliveryIndicationService: typeof DeliveryIndicationServiceApiImport;
        type DocumentTemplateService = DocumentTemplateServiceApiImport;
        const DocumentTemplateService: typeof DocumentTemplateServiceApiImport;
        type DocumentTemplateTypeService = DocumentTemplateTypeServiceApiImport;
        const DocumentTemplateTypeService: typeof DocumentTemplateTypeServiceApiImport;
        type ExternalTransferBankTransactionService = ExternalTransferBankTransactionServiceApiImport;
        const ExternalTransferBankTransactionService: typeof ExternalTransferBankTransactionServiceApiImport;
        type HumanUserService = HumanUserServiceApiImport;
        const HumanUserService: typeof HumanUserServiceApiImport;
        type InternalTransferBankTransactionService = InternalTransferBankTransactionServiceApiImport;
        const InternalTransferBankTransactionService: typeof InternalTransferBankTransactionServiceApiImport;
        type InvoiceReconciliationRecordInvoiceLinkService = InvoiceReconciliationRecordInvoiceLinkServiceApiImport;
        const InvoiceReconciliationRecordInvoiceLinkService: typeof InvoiceReconciliationRecordInvoiceLinkServiceApiImport;
        type InvoiceReconciliationRecordService = InvoiceReconciliationRecordServiceApiImport;
        const InvoiceReconciliationRecordService: typeof InvoiceReconciliationRecordServiceApiImport;
        type InvoiceReimbursementService = InvoiceReimbursementServiceApiImport;
        const InvoiceReimbursementService: typeof InvoiceReimbursementServiceApiImport;
        type LabelDescriptionGroupService = LabelDescriptionGroupServiceApiImport;
        const LabelDescriptionGroupService: typeof LabelDescriptionGroupServiceApiImport;
        type LabelDescriptionService = LabelDescriptionServiceApiImport;
        const LabelDescriptionService: typeof LabelDescriptionServiceApiImport;
        type LanguageService = LanguageServiceApiImport;
        const LanguageService: typeof LanguageServiceApiImport;
        type LegalOrganizationFormService = LegalOrganizationFormServiceApiImport;
        const LegalOrganizationFormService: typeof LegalOrganizationFormServiceApiImport;
        type ManualTaskService = ManualTaskServiceApiImport;
        const ManualTaskService: typeof ManualTaskServiceApiImport;
        type PaymentConnectorConfigurationService = PaymentConnectorConfigurationServiceApiImport;
        const PaymentConnectorConfigurationService: typeof PaymentConnectorConfigurationServiceApiImport;
        type PaymentConnectorService = PaymentConnectorServiceApiImport;
        const PaymentConnectorService: typeof PaymentConnectorServiceApiImport;
        type PaymentLinkService = PaymentLinkServiceApiImport;
        const PaymentLinkService: typeof PaymentLinkServiceApiImport;
        type PaymentMethodBrandService = PaymentMethodBrandServiceApiImport;
        const PaymentMethodBrandService: typeof PaymentMethodBrandServiceApiImport;
        type PaymentMethodConfigurationService = PaymentMethodConfigurationServiceApiImport;
        const PaymentMethodConfigurationService: typeof PaymentMethodConfigurationServiceApiImport;
        type PaymentMethodService = PaymentMethodServiceApiImport;
        const PaymentMethodService: typeof PaymentMethodServiceApiImport;
        type PaymentProcessorConfigurationService = PaymentProcessorConfigurationServiceApiImport;
        const PaymentProcessorConfigurationService: typeof PaymentProcessorConfigurationServiceApiImport;
        type PaymentProcessorService = PaymentProcessorServiceApiImport;
        const PaymentProcessorService: typeof PaymentProcessorServiceApiImport;
        type PaymentTerminalService = PaymentTerminalServiceApiImport;
        const PaymentTerminalService: typeof PaymentTerminalServiceApiImport;
        type PaymentTerminalTillService = PaymentTerminalTillServiceApiImport;
        const PaymentTerminalTillService: typeof PaymentTerminalTillServiceApiImport;
        type PaymentTerminalTransactionSummaryService = PaymentTerminalTransactionSummaryServiceApiImport;
        const PaymentTerminalTransactionSummaryService: typeof PaymentTerminalTransactionSummaryServiceApiImport;
        type PermissionService = PermissionServiceApiImport;
        const PermissionService: typeof PermissionServiceApiImport;
        type RefundBankTransactionService = RefundBankTransactionServiceApiImport;
        const RefundBankTransactionService: typeof RefundBankTransactionServiceApiImport;
        type RefundCommentService = RefundCommentServiceApiImport;
        const RefundCommentService: typeof RefundCommentServiceApiImport;
        type RefundRecoveryBankTransactionService = RefundRecoveryBankTransactionServiceApiImport;
        const RefundRecoveryBankTransactionService: typeof RefundRecoveryBankTransactionServiceApiImport;
        type RefundService = RefundServiceApiImport;
        const RefundService: typeof RefundServiceApiImport;
        type ShopifyRecurringOrderService = ShopifyRecurringOrderServiceApiImport;
        const ShopifyRecurringOrderService: typeof ShopifyRecurringOrderServiceApiImport;
        type ShopifySubscriberService = ShopifySubscriberServiceApiImport;
        const ShopifySubscriberService: typeof ShopifySubscriberServiceApiImport;
        type ShopifySubscriptionProductService = ShopifySubscriptionProductServiceApiImport;
        const ShopifySubscriptionProductService: typeof ShopifySubscriptionProductServiceApiImport;
        type ShopifySubscriptionService = ShopifySubscriptionServiceApiImport;
        const ShopifySubscriptionService: typeof ShopifySubscriptionServiceApiImport;
        type ShopifySubscriptionSuspensionService = ShopifySubscriptionSuspensionServiceApiImport;
        const ShopifySubscriptionSuspensionService: typeof ShopifySubscriptionSuspensionServiceApiImport;
        type ShopifySubscriptionVersionService = ShopifySubscriptionVersionServiceApiImport;
        const ShopifySubscriptionVersionService: typeof ShopifySubscriptionVersionServiceApiImport;
        type ShopifyTransactionService = ShopifyTransactionServiceApiImport;
        const ShopifyTransactionService: typeof ShopifyTransactionServiceApiImport;
        type SpaceService = SpaceServiceApiImport;
        const SpaceService: typeof SpaceServiceApiImport;
        type StaticValueService = StaticValueServiceApiImport;
        const StaticValueService: typeof StaticValueServiceApiImport;
        type TokenService = TokenServiceApiImport;
        const TokenService: typeof TokenServiceApiImport;
        type TokenVersionService = TokenVersionServiceApiImport;
        const TokenVersionService: typeof TokenVersionServiceApiImport;
        type TransactionCommentService = TransactionCommentServiceApiImport;
        const TransactionCommentService: typeof TransactionCommentServiceApiImport;
        type TransactionCompletionService = TransactionCompletionServiceApiImport;
        const TransactionCompletionService: typeof TransactionCompletionServiceApiImport;
        type TransactionIframeService = TransactionIframeServiceApiImport;
        const TransactionIframeService: typeof TransactionIframeServiceApiImport;
        type TransactionInvoiceCommentService = TransactionInvoiceCommentServiceApiImport;
        const TransactionInvoiceCommentService: typeof TransactionInvoiceCommentServiceApiImport;
        type TransactionInvoiceService = TransactionInvoiceServiceApiImport;
        const TransactionInvoiceService: typeof TransactionInvoiceServiceApiImport;
        type TransactionLightboxService = TransactionLightboxServiceApiImport;
        const TransactionLightboxService: typeof TransactionLightboxServiceApiImport;
        type TransactionLineItemVersionService = TransactionLineItemVersionServiceApiImport;
        const TransactionLineItemVersionService: typeof TransactionLineItemVersionServiceApiImport;
        type TransactionMobileSdkService = TransactionMobileSdkServiceApiImport;
        const TransactionMobileSdkService: typeof TransactionMobileSdkServiceApiImport;
        type TransactionPaymentPageService = TransactionPaymentPageServiceApiImport;
        const TransactionPaymentPageService: typeof TransactionPaymentPageServiceApiImport;
        type TransactionService = TransactionServiceApiImport;
        const TransactionService: typeof TransactionServiceApiImport;
        type TransactionTerminalService = TransactionTerminalServiceApiImport;
        const TransactionTerminalService: typeof TransactionTerminalServiceApiImport;
        type TransactionVoidService = TransactionVoidServiceApiImport;
        const TransactionVoidService: typeof TransactionVoidServiceApiImport;
        type UserAccountRoleService = UserAccountRoleServiceApiImport;
        const UserAccountRoleService: typeof UserAccountRoleServiceApiImport;
        type UserSpaceRoleService = UserSpaceRoleServiceApiImport;
        const UserSpaceRoleService: typeof UserSpaceRoleServiceApiImport;
        type WebhookListenerService = WebhookListenerServiceApiImport;
        const WebhookListenerService: typeof WebhookListenerServiceApiImport;
        type WebhookUrlService = WebhookUrlServiceApiImport;
        const WebhookUrlService: typeof WebhookUrlServiceApiImport;
    }
}
